/* automatically generated by rust-bindgen 0.65.1 */

pub const UNIX_MATHLINK: i32 = 1;
pub const UNIX_WSTP: i32 = 1;
pub const LITTLEENDIAN_NUMERIC_TYPES: i32 = 1;
pub const LINUX_MATHLINK: i32 = 1;
pub const X86_64_LINUX_MATHLINK: i32 = 1;
pub const WSVERSION: i32 = 6;
pub const WSINTERFACE: i32 = 4;
pub const WSREVISION: i32 = 46;
pub const WSCREATIONID: i32 = 114411;
pub const WSAPI4REVISION: i32 = 25;
pub const WSAPIREVISION: i32 = 25;
pub const WSOLDDEFINITION: i32 = 25;
pub const WSREADYPARALLELERROR: i32 = -1;
pub const WSREADYPARALLELTIMEDOUT: i32 = -2;
pub const WSREADYPARALLELINVALIDARGUMENT: i32 = -3;
pub const WSWAITSUCCESS: i32 = 1;
pub const WSWAITERROR: i32 = 2;
pub const WSWAITTIMEOUT: i32 = 3;
pub const WSWAITCALLBACKABORTED: i32 = 4;
pub const MLINTERFACE: i32 = 4;
pub const ML64BIT_MATHLINK: i32 = 1;
pub const ML_SMALLEST_SIGNED_64BIT: i64 = -9223372036854775808;
pub const ML_LARGEST_SIGNED_64BIT: i64 = 9223372036854775807;
pub const ML_LARGEST_UNSIGNED_64BIT: i32 = -1;
pub const MLSUCCESS: i32 = 1;
pub const MLFAILURE: i32 = 0;
pub const MLDEV_WRITE_WINDOW: i32 = 0;
pub const MLDEV_WRITE: i32 = 1;
pub const MLDEV_HAS_DATA: i32 = 2;
pub const MLDEV_READ: i32 = 3;
pub const MLDEV_READ_COMPLETE: i32 = 4;
pub const MLDEV_ACKNOWLEDGE: i32 = 5;
pub const T_DEV_WRITE_WINDOW: i32 = 0;
pub const T_DEV_WRITE: i32 = 1;
pub const T_DEV_HAS_DATA: i32 = 2;
pub const T_DEV_READ: i32 = 3;
pub const T_DEV_READ_COMPLETE: i32 = 4;
pub const REALBIT: i32 = 4;
pub const REAL_MASK: i32 = 16;
pub const XDRBIT: i32 = 5;
pub const XDR_MASK: i32 = 32;
pub const BINARYBIT: i32 = 7;
pub const BINARY_MASK: i32 = 128;
pub const SIZEVARIANTBIT: i32 = 6;
pub const SIZEVARIANT_MASK: i32 = 64;
pub const WSTK_INVALID: i32 = 155;
pub const WSTK_8BIT_SIGNED_2sCOMPLEMENT_INTEGER: i32 = 160;
pub const WSTK_8BIT_UNSIGNED_2sCOMPLEMENT_INTEGER: i32 = 161;
pub const WSTK_8BIT_UNSIGNED_INTEGER: i32 = 161;
pub const WSTK_16BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER: i32 = 162;
pub const WSTK_16BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER: i32 = 163;
pub const WSTK_16BIT_UNSIGNED_BIGENDIAN_INTEGER: i32 = 163;
pub const WSTK_32BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER: i32 = 164;
pub const WSTK_32BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER: i32 = 165;
pub const WSTK_32BIT_UNSIGNED_BIGENDIAN_INTEGER: i32 = 165;
pub const WSTK_64BIT_SIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER: i32 = 166;
pub const WSTK_64BIT_UNSIGNED_2sCOMPLEMENT_BIGENDIAN_INTEGER: i32 = 167;
pub const WSTK_64BIT_UNSIGNED_BIGENDIAN_INTEGER: i32 = 167;
pub const WSTK_16BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER: i32 = 226;
pub const WSTK_16BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER: i32 = 227;
pub const WSTK_16BIT_UNSIGNED_LITTLEENDIAN_INTEGER: i32 = 227;
pub const WSTK_32BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER: i32 = 228;
pub const WSTK_32BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER: i32 = 229;
pub const WSTK_32BIT_UNSIGNED_LITTLEENDIAN_INTEGER: i32 = 229;
pub const WSTK_64BIT_SIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER: i32 = 230;
pub const WSTK_64BIT_UNSIGNED_2sCOMPLEMENT_LITTLEENDIAN_INTEGER: i32 = 231;
pub const WSTK_64BIT_UNSIGNED_LITTLEENDIAN_INTEGER: i32 = 231;
pub const WSTK_BIGENDIAN_IEEE754_SINGLE: i32 = 180;
pub const WSTK_BIGENDIAN_IEEE754_DOUBLE: i32 = 182;
pub const WSTK_BIGENDIAN_128BIT_DOUBLE: i32 = 184;
pub const WSTK_LITTLEENDIAN_IEEE754_SINGLE: i32 = 244;
pub const WSTK_LITTLEENDIAN_IEEE754_DOUBLE: i32 = 246;
pub const WSTK_LITTLEENDIAN_128BIT_DOUBLE: i32 = 248;
pub const WSNE__INITSELECTOR: i32 = 0;
pub const WSTK_CSHORT_P: i32 = 193;
pub const WSTK_CINT_P: i32 = 194;
pub const WSTK_CLONG_P: i32 = 195;
pub const WSTK_CFLOAT_P: i32 = 209;
pub const WSTK_CDOUBLE_P: i32 = 210;
pub const WSTK_CLONGDOUBLE_P: i32 = 211;
pub const WSTK_64BIT_LITTLEENDIAN_STRUCTURE: i32 = 196;
pub const WSTK_64BIT_BIGENDIAN_STRUCTURE: i32 = 197;
pub const WSTK_128BIT_EXTENDED: i32 = 158;
pub const WSTK_128BIT_LONGDOUBLE: i32 = 158;
pub const WSTK_96BIT_HIGHPADDED_INTEL_80BIT_EXTENDED: i32 = 218;
pub const WSTK_INTEL_80BIT_EXTENDED: i32 = 216;
pub const WSMASTIFF_NUMERICS_ID: &[u8; 8usize] = b"mastiff\0";
pub const WSMASTIFF_CSHORT: i32 = 162;
pub const WSMASTIFF_CINT: i32 = 164;
pub const WSMASTIFF_CLONG: i32 = 164;
pub const WSMASTIFF_CINT64: i32 = 197;
pub const WSMASTIFF_CSIZE_T: i32 = 164;
pub const WSMASTIFF_CFLOAT: i32 = 180;
pub const WSMASTIFF_CDOUBLE: i32 = 182;
pub const WSMASTIFF_CLONGDOUBLE: i32 = 158;
pub const WSMASTIFF_WSSHORT: i32 = 162;
pub const WSMASTIFF_WSINT: i32 = 164;
pub const WSMASTIFF_WSLONG: i32 = 164;
pub const WSMASTIFF_WSSIZE_T: i32 = 164;
pub const WSMASTIFF_WSINT64: i32 = 197;
pub const WSMASTIFF_WSFLOAT: i32 = 180;
pub const WSMASTIFF_WSDOUBLE: i32 = 182;
pub const WSMASTIFF_WSLONGDOUBLE: i32 = 158;
pub const WSJAPANESECHIN_NUMERICS_ID: &[u8; 13usize] = b"japanesechin\0";
pub const WSJAPANESECHIN_CSHORT: i32 = 162;
pub const WSJAPANESECHIN_CINT: i32 = 164;
pub const WSJAPANESECHIN_CLONG: i32 = 166;
pub const WSJAPANESECHIN_CINT64: i32 = 166;
pub const WSJAPANESECHIN_CSIZE_T: i32 = 166;
pub const WSJAPANESECHIN_CFLOAT: i32 = 180;
pub const WSJAPANESECHIN_CDOUBLE: i32 = 182;
pub const WSJAPANESECHIN_CLONGDOUBLE: i32 = 158;
pub const WSJAPANESECHIN_WSSHORT: i32 = 162;
pub const WSJAPANESECHIN_WSINT: i32 = 164;
pub const WSJAPANESECHIN_WSLONG: i32 = 166;
pub const WSJAPANESECHIN_WSINT64: i32 = 166;
pub const WSJAPANESECHIN_WSSIZE_T: i32 = 166;
pub const WSJAPANESECHIN_WSFLOAT: i32 = 180;
pub const WSJAPANESECHIN_WSDOUBLE: i32 = 182;
pub const WSJAPANESECHIN_WSLONGDOUBLE: i32 = 158;
pub const WSBORZOI_NUMERICS_ID: &[u8; 7usize] = b"borzoi\0";
pub const WSBORZOI_CSHORT: i32 = 162;
pub const WSBORZOI_CINT: i32 = 164;
pub const WSBORZOI_CLONG: i32 = 164;
pub const WSBORZOI_CSIZE_T: i32 = 164;
pub const WSBORZOI_CINT64: i32 = 197;
pub const WSBORZOI_CFLOAT: i32 = 180;
pub const WSBORZOI_CDOUBLE: i32 = 182;
pub const WSBORZOI_WSSHORT: i32 = 162;
pub const WSBORZOI_WSINT: i32 = 164;
pub const WSBORZOI_WSLONG: i32 = 164;
pub const WSBORZOI_WSSIZE_T: i32 = 164;
pub const WSBORZOI_WSINT64: i32 = 197;
pub const WSBORZOI_WSFLOAT: i32 = 180;
pub const WSBORZOI_WSDOUBLE: i32 = 182;
pub const WSBRIARD_NUMERICS_ID: &[u8; 7usize] = b"briard\0";
pub const WSBRIARD_CSHORT: i32 = 162;
pub const WSBRIARD_CINT: i32 = 164;
pub const WSBRIARD_CLONG: i32 = 166;
pub const WSBRIARD_CINT64: i32 = 166;
pub const WSBRIARD_CSIZE_T: i32 = 166;
pub const WSBRIARD_CFLOAT: i32 = 180;
pub const WSBRIARD_CDOUBLE: i32 = 182;
pub const WSBRIARD_WSSHORT: i32 = 162;
pub const WSBRIARD_WSINT: i32 = 164;
pub const WSBRIARD_WSLONG: i32 = 166;
pub const WSBRIARD_WSINT64: i32 = 166;
pub const WSBRIARD_WSSIZE_T: i32 = 166;
pub const WSBRIARD_WSFLOAT: i32 = 180;
pub const WSBRIARD_WSDOUBLE: i32 = 182;
pub const WSKEESHOND_NUMERICS_ID: &[u8; 9usize] = b"keeshond\0";
pub const WSKEESHOND_CSHORT: i32 = 162;
pub const WSKEESHOND_CINT: i32 = 164;
pub const WSKEESHOND_CLONG: i32 = 164;
pub const WSKEESHOND_CSIZE_T: i32 = 164;
pub const WSKEESHOND_CINT64: i32 = 197;
pub const WSKEESHOND_CFLOAT: i32 = 180;
pub const WSKEESHOND_CDOUBLE: i32 = 182;
pub const WSKEESHOND_CLONGDOUBLE: i32 = 182;
pub const WSKEESHOND_WSSHORT: i32 = 162;
pub const WSKEESHOND_WSINT: i32 = 164;
pub const WSKEESHOND_WSLONG: i32 = 164;
pub const WSKEESHOND_WSSIZE_T: i32 = 164;
pub const WSKEESHOND_WSINT64: i32 = 197;
pub const WSKEESHOND_WSFLOAT: i32 = 180;
pub const WSKEESHOND_WSDOUBLE: i32 = 182;
pub const WSKEESHOND_WSLONGDOUBLE: i32 = 182;
pub const WSKOMONDOR_NUMERICS_ID: &[u8; 9usize] = b"komondor\0";
pub const WSKOMONDOR_CSHORT: i32 = 162;
pub const WSKOMONDOR_CINT: i32 = 164;
pub const WSKOMONDOR_CLONG: i32 = 166;
pub const WSKOMONDOR_CINT64: i32 = 166;
pub const WSKOMONDOR_CSIZE_T: i32 = 166;
pub const WSKOMONDOR_CFLOAT: i32 = 180;
pub const WSKOMONDOR_CDOUBLE: i32 = 182;
pub const WSKOMONDOR_CLONGDOUBLE: i32 = 182;
pub const WSKOMONDOR_WSSHORT: i32 = 162;
pub const WSKOMONDOR_WSINT: i32 = 164;
pub const WSKOMONDOR_WSLONG: i32 = 166;
pub const WSKOMONDOR_WSSIZE_T: i32 = 166;
pub const WSKOMONDOR_WSINT64: i32 = 166;
pub const WSKOMONDOR_WSFLOAT: i32 = 180;
pub const WSKOMONDOR_WSDOUBLE: i32 = 182;
pub const WSKOMONDOR_WSLONGDOUBLE: i32 = 182;
pub const WSNORWEGIANELKHOUND_NUMERICS_ID: &[u8; 18usize] = b"norwegianelkhound\0";
pub const WSNORWEGIANELKHOUND_CSHORT: i32 = 226;
pub const WSNORWEGIANELKHOUND_CINT: i32 = 228;
pub const WSNORWEGIANELKHOUND_CLONG: i32 = 228;
pub const WSNORWEGIANELKHOUND_CINT64: i32 = 196;
pub const WSNORWEGIANELKHOUND_CSIZE_T: i32 = 228;
pub const WSNORWEGIANELKHOUND_CFLOAT: i32 = 244;
pub const WSNORWEGIANELKHOUND_CDOUBLE: i32 = 246;
pub const WSNORWEGIANELKHOUND_CLONGDOUBLE: i32 = 218;
pub const WSNORWEGIANELKHOUND_WSSHORT: i32 = 226;
pub const WSNORWEGIANELKHOUND_WSINT: i32 = 228;
pub const WSNORWEGIANELKHOUND_WSLONG: i32 = 228;
pub const WSNORWEGIANELKHOUND_WSSIZE_T: i32 = 228;
pub const WSNORWEGIANELKHOUND_WSINT64: i32 = 196;
pub const WSNORWEGIANELKHOUND_WSFLOAT: i32 = 244;
pub const WSNORWEGIANELKHOUND_WSDOUBLE: i32 = 246;
pub const WSNORWEGIANELKHOUND_WSLONGDOUBLE: i32 = 218;
pub const WSNORWICHTERRIOR_NUMERICS_ID: &[u8; 15usize] = b"norwichterrior\0";
pub const WSNORWICHTERRIOR_CSHORT: i32 = 226;
pub const WSNORWICHTERRIOR_CINT: i32 = 228;
pub const WSNORWICHTERRIOR_CLONG: i32 = 230;
pub const WSNORWICHTERRIOR_CINT64: i32 = 230;
pub const WSNORWICHTERRIOR_CSIZE_T: i32 = 230;
pub const WSNORWICHTERRIOR_CFLOAT: i32 = 244;
pub const WSNORWICHTERRIOR_CDOUBLE: i32 = 246;
pub const WSNORWICHTERRIOR_CLONGDOUBLE: i32 = 248;
pub const WSNORWICHTERRIOR_WSSHORT: i32 = 226;
pub const WSNORWICHTERRIOR_WSINT: i32 = 228;
pub const WSNORWICHTERRIOR_WSLONG: i32 = 230;
pub const WSNORWICHTERRIOR_WSSIZE_T: i32 = 230;
pub const WSNORWICHTERRIOR_WSINT64: i32 = 230;
pub const WSNORWICHTERRIOR_WSFLOAT: i32 = 244;
pub const WSNORWICHTERRIOR_WSDOUBLE: i32 = 246;
pub const WSNORWICHTERRIOR_WSLONGDOUBLE: i32 = 248;
pub const WSSAINTBERNARD_NUMERICS_ID: &[u8; 14usize] = b"saintbernarnd\0";
pub const WSSAINTBERNARD_CSHORT: i32 = 162;
pub const WSSAINTBERNARD_CINT: i32 = 164;
pub const WSSAINTBERNARD_CLONG: i32 = 164;
pub const WSSAINTBERNARD_CINT64: i32 = 197;
pub const WSSAINTBERNARD_CSIZE_T: i32 = 164;
pub const WSSAINTBERNARD_CFLOAT: i32 = 180;
pub const WSSAINTBERNARD_CDOUBLE: i32 = 182;
pub const WSSAINTBERNARD_CLONGDOUBLE: i32 = 184;
pub const WSSAINTBERNARD_WSSHORT: i32 = 162;
pub const WSSAINTBERNARD_WSINT: i32 = 164;
pub const WSSAINTBERNARD_WSLONG: i32 = 164;
pub const WSSAINTBERNARD_WSINT64: i32 = 197;
pub const WSSAINTBERNARD_WSSIZE_T: i32 = 164;
pub const WSSAINTBERNARD_WSFLOAT: i32 = 180;
pub const WSSAINTBERNARD_WSDOUBLE: i32 = 182;
pub const WSSAINTBERNARD_WSLONGDOUBLE: i32 = 184;
pub const WSBERNESEMOUNTAINDOG_NUMERICS_ID: &[u8; 19usize] = b"bernesemountaindog\0";
pub const WSBERNESEMOUNTAINDOG_CSHORT: i32 = 162;
pub const WSBERNESEMOUNTAINDOG_CINT: i32 = 164;
pub const WSBERNESEMOUNTAINDOG_CLONG: i32 = 166;
pub const WSBERNESEMOUNTAINDOG_CINT64: i32 = 166;
pub const WSBERNESEMOUNTAINDOG_CSIZE_T: i32 = 166;
pub const WSBERNESEMOUNTAINDOG_CFLOAT: i32 = 180;
pub const WSBERNESEMOUNTAINDOG_CDOUBLE: i32 = 182;
pub const WSBERNESEMOUNTAINDOG_CLONGDOUBLE: i32 = 184;
pub const WSBERNESEMOUNTAINDOG_WSSHORT: i32 = 162;
pub const WSBERNESEMOUNTAINDOG_WSINT: i32 = 164;
pub const WSBERNESEMOUNTAINDOG_WSLONG: i32 = 166;
pub const WSBERNESEMOUNTAINDOG_WSINT64: i32 = 166;
pub const WSBERNESEMOUNTAINDOG_WSSIZE_T: i32 = 166;
pub const WSBERNESEMOUNTAINDOG_WSFLOAT: i32 = 180;
pub const WSBERNESEMOUNTAINDOG_WSDOUBLE: i32 = 182;
pub const WSBERNESEMOUNTAINDOG_WSLONGDOUBLE: i32 = 184;
pub const WSSETTER_NUMERICS_ID: &[u8; 7usize] = b"setter\0";
pub const WSSETTER_CSHORT: i32 = 226;
pub const WSSETTER_CINT: i32 = 228;
pub const WSSETTER_CLONG: i32 = 228;
pub const WSSETTER_CINT64: i32 = 196;
pub const WSSETTER_CSIZE_T: i32 = 228;
pub const WSSETTER_CFLOAT: i32 = 244;
pub const WSSETTER_CDOUBLE: i32 = 246;
pub const WSSETTER_CLONGDOUBLE: i32 = 246;
pub const WSSETTER_WSSHORT: i32 = 226;
pub const WSSETTER_WSINT: i32 = 228;
pub const WSSETTER_WSLONG: i32 = 228;
pub const WSSETTER_WSINT64: i32 = 196;
pub const WSSETTER_WSSIZE_T: i32 = 228;
pub const WSSETTER_WSFLOAT: i32 = 244;
pub const WSSETTER_WSDOUBLE: i32 = 246;
pub const WSSETTER_WSLONGDOUBLE: i32 = 216;
pub const WSFRENCH_BULLDOG_NUMERICS_ID: &[u8; 15usize] = b"french_bulldog\0";
pub const WSFRENCH_BULLDOG_CSHORT: i32 = 226;
pub const WSFRENCH_BULLDOG_CINT: i32 = 228;
pub const WSFRENCH_BULLDOG_CLONG: i32 = 228;
pub const WSFRENCH_BULLDOG_CINT64: i32 = 196;
pub const WSFRENCH_BULLDOG_CSIZE_T: i32 = 228;
pub const WSFRENCH_BULLDOG_CFLOAT: i32 = 244;
pub const WSFRENCH_BULLDOG_CDOUBLE: i32 = 246;
pub const WSFRENCH_BULLDOG_CLONGDOUBLE: i32 = 246;
pub const WSFRENCH_BULLDOG_WSSHORT: i32 = 226;
pub const WSFRENCH_BULLDOG_WSINT: i32 = 228;
pub const WSFRENCH_BULLDOG_WSLONG: i32 = 228;
pub const WSFRENCH_BULLDOG_WSINT64: i32 = 196;
pub const WSFRENCH_BULLDOG_WSSIZE_T: i32 = 228;
pub const WSFRENCH_BULLDOG_WSFLOAT: i32 = 244;
pub const WSFRENCH_BULLDOG_WSDOUBLE: i32 = 246;
pub const WSFRENCH_BULLDOG_WSLONGDOUBLE: i32 = 246;
pub const WSBICHON_FRISE_NUMERICS_ID: &[u8; 13usize] = b"bichon_frise\0";
pub const WSBICHON_FRISE_CSHORT: i32 = 226;
pub const WSBICHON_FRISE_CINT: i32 = 228;
pub const WSBICHON_FRISE_CLONG: i32 = 228;
pub const WSBICHON_FRISE_CINT64: i32 = 230;
pub const WSBICHON_FRISE_CSIZE_T: i32 = 230;
pub const WSBICHON_FRISE_CFLOAT: i32 = 244;
pub const WSBICHON_FRISE_CDOUBLE: i32 = 246;
pub const WSBICHON_FRISE_CLONGDOUBLE: i32 = 246;
pub const WSBICHON_FRISE_WSSHORT: i32 = 226;
pub const WSBICHON_FRISE_WSINT: i32 = 228;
pub const WSBICHON_FRISE_WSLONG: i32 = 228;
pub const WSBICHON_FRISE_WSINT64: i32 = 230;
pub const WSBICHON_FRISE_WSSIZE_T: i32 = 230;
pub const WSBICHON_FRISE_WSFLOAT: i32 = 244;
pub const WSBICHON_FRISE_WSDOUBLE: i32 = 246;
pub const WSBICHON_FRISE_WSLONGDOUBLE: i32 = 246;
pub const WSHELEN_NUMERICS_ID: &[u8; 6usize] = b"helen\0";
pub const WSHELEN_CSHORT: i32 = 226;
pub const WSHELEN_CINT: i32 = 228;
pub const WSHELEN_CLONG: i32 = 228;
pub const WSHELEN_CINT64: i32 = 196;
pub const WSHELEN_CSIZE_T: i32 = 228;
pub const WSHELEN_CFLOAT: i32 = 244;
pub const WSHELEN_CDOUBLE: i32 = 246;
pub const WSHELEN_CLONGDOUBLE: i32 = 246;
pub const WSHELEN_WSSHORT: i32 = 226;
pub const WSHELEN_WSINT: i32 = 228;
pub const WSHELEN_WSLONG: i32 = 228;
pub const WSHELEN_WSINT64: i32 = 196;
pub const WSHELEN_WSSIZE_T: i32 = 228;
pub const WSHELEN_WSFLOAT: i32 = 244;
pub const WSHELEN_WSDOUBLE: i32 = 246;
pub const WSHELEN_WSLONGDOUBLE: i32 = 246;
pub const WSBEAGLE_NUMERICS_ID: &[u8; 7usize] = b"beagle\0";
pub const WSBEAGLE_CSHORT: i32 = 162;
pub const WSBEAGLE_CINT: i32 = 164;
pub const WSBEAGLE_CLONG: i32 = 164;
pub const WSBEAGLE_CINT64: i32 = 197;
pub const WSBEAGLE_CSIZE_T: i32 = 164;
pub const WSBEAGLE_CFLOAT: i32 = 180;
pub const WSBEAGLE_CDOUBLE: i32 = 182;
pub const WSBEAGLE_CLONGDOUBLE: i32 = 182;
pub const WSBEAGLE_WSSHORT: i32 = 162;
pub const WSBEAGLE_WSINT: i32 = 164;
pub const WSBEAGLE_WSLONG: i32 = 164;
pub const WSBEAGLE_WSINT64: i32 = 197;
pub const WSBEAGLE_WSSIZE_T: i32 = 164;
pub const WSBEAGLE_WSFLOAT: i32 = 180;
pub const WSBEAGLE_WSDOUBLE: i32 = 182;
pub const WSBEAGLE_WSLONGDOUBLE: i32 = 182;
pub const WSBULLTERRIER_NUMERICS_ID: &[u8; 12usize] = b"bullterrier\0";
pub const WSBULLTERRIER_CSHORT: i32 = 162;
pub const WSBULLTERRIER_CINT: i32 = 164;
pub const WSBULLTERRIER_CLONG: i32 = 164;
pub const WSBULLTERRIER_CINT64: i32 = 197;
pub const WSBULLTERRIER_CSIZE_T: i32 = 164;
pub const WSBULLTERRIER_CFLOAT: i32 = 180;
pub const WSBULLTERRIER_CDOUBLE: i32 = 182;
pub const WSBULLTERRIER_CLONGDOUBLE: i32 = 184;
pub const WSBULLTERRIER_WSSHORT: i32 = 162;
pub const WSBULLTERRIER_WSINT: i32 = 164;
pub const WSBULLTERRIER_WSLONG: i32 = 164;
pub const WSBULLTERRIER_WSINT64: i32 = 197;
pub const WSBULLTERRIER_WSSIZE_T: i32 = 164;
pub const WSBULLTERRIER_WSFLOAT: i32 = 180;
pub const WSBULLTERRIER_WSDOUBLE: i32 = 182;
pub const WSBULLTERRIER_WSLONGDOUBLE: i32 = 184;
pub const WSBORDERTERRIER_NUMERICS_ID: &[u8; 14usize] = b"borderterrier\0";
pub const WSBORDERTERRIER_CSHORT: i32 = 162;
pub const WSBORDERTERRIER_CINT: i32 = 164;
pub const WSBORDERTERRIER_CLONG: i32 = 166;
pub const WSBORDERTERRIER_CINT64: i32 = 166;
pub const WSBORDERTERRIER_CSIZE_T: i32 = 166;
pub const WSBORDERTERRIER_CFLOAT: i32 = 180;
pub const WSBORDERTERRIER_CDOUBLE: i32 = 182;
pub const WSBORDERTERRIER_CLONGDOUBLE: i32 = 184;
pub const WSBORDERTERRIER_WSSHORT: i32 = 162;
pub const WSBORDERTERRIER_WSINT: i32 = 164;
pub const WSBORDERTERRIER_WSLONG: i32 = 166;
pub const WSBORDERTERRIER_WSINT64: i32 = 166;
pub const WSBORDERTERRIER_WSSIZE_T: i32 = 166;
pub const WSBORDERTERRIER_WSFLOAT: i32 = 180;
pub const WSBORDERTERRIER_WSDOUBLE: i32 = 182;
pub const WSBORDERTERRIER_WSLONGDOUBLE: i32 = 184;
pub const WSBASENJI_NUMERICS_ID: &[u8; 8usize] = b"basenji\0";
pub const WSBASENJI_CSHORT: i32 = 226;
pub const WSBASENJI_CINT: i32 = 228;
pub const WSBASENJI_CLONG: i32 = 228;
pub const WSBASENJI_CINT64: i32 = 196;
pub const WSBASENJI_CSIZE_T: i32 = 228;
pub const WSBASENJI_CFLOAT: i32 = 244;
pub const WSBASENJI_CDOUBLE: i32 = 246;
pub const WSBASENJI_CLONGDOUBLE: i32 = 248;
pub const WSBASENJI_WSSHORT: i32 = 226;
pub const WSBASENJI_WSINT: i32 = 228;
pub const WSBASENJI_WSLONG: i32 = 228;
pub const WSBASENJI_WSINT64: i32 = 196;
pub const WSBASENJI_WSSIZE_T: i32 = 228;
pub const WSBASENJI_WSFLOAT: i32 = 244;
pub const WSBASENJI_WSDOUBLE: i32 = 246;
pub const WSBASENJI_WSLONGDOUBLE: i32 = 248;
pub const WSSHARPEI_NUMERICS_ID: &[u8; 8usize] = b"sharpei\0";
pub const WSSHARPEI_CSHORT: i32 = 226;
pub const WSSHARPEI_CINT: i32 = 228;
pub const WSSHARPEI_CLONG: i32 = 228;
pub const WSSHARPEI_CINT64: i32 = 196;
pub const WSSHARPEI_CSIZE_T: i32 = 228;
pub const WSSHARPEI_CFLOAT: i32 = 244;
pub const WSSHARPEI_CDOUBLE: i32 = 246;
pub const WSSHARPEI_CLONGDOUBLE: i32 = 248;
pub const WSSHARPEI_WSSHORT: i32 = 226;
pub const WSSHARPEI_WSINT: i32 = 228;
pub const WSSHARPEI_WSLONG: i32 = 228;
pub const WSSHARPEI_WSINT64: i32 = 196;
pub const WSSHARPEI_WSSIZE_T: i32 = 228;
pub const WSSHARPEI_WSFLOAT: i32 = 244;
pub const WSSHARPEI_WSDOUBLE: i32 = 246;
pub const WSSHARPEI_WSLONGDOUBLE: i32 = 248;
pub const WSTIBETANMASTIFF_NUMERICS_ID: &[u8; 15usize] = b"tibetanmastiff\0";
pub const WSTIBETANMASTIFF_CSHORT: i32 = 226;
pub const WSTIBETANMASTIFF_CINT: i32 = 228;
pub const WSTIBETANMASTIFF_CLONG: i32 = 230;
pub const WSTIBETANMASTIFF_CINT64: i32 = 230;
pub const WSTIBETANMASTIFF_CSIZE_T: i32 = 230;
pub const WSTIBETANMASTIFF_CFLOAT: i32 = 244;
pub const WSTIBETANMASTIFF_CDOUBLE: i32 = 246;
pub const WSTIBETANMASTIFF_CLONGDOUBLE: i32 = 248;
pub const WSTIBETANMASTIFF_WSSHORT: i32 = 226;
pub const WSTIBETANMASTIFF_WSINT: i32 = 228;
pub const WSTIBETANMASTIFF_WSLONG: i32 = 230;
pub const WSTIBETANMASTIFF_WSINT64: i32 = 230;
pub const WSTIBETANMASTIFF_WSSIZE_T: i32 = 230;
pub const WSTIBETANMASTIFF_WSFLOAT: i32 = 244;
pub const WSTIBETANMASTIFF_WSDOUBLE: i32 = 246;
pub const WSTIBETANMASTIFF_WSLONGDOUBLE: i32 = 248;
pub const WSGREATDANE_NUMERICS_ID: &[u8; 10usize] = b"greatdane\0";
pub const WSGREATDANE_CSHORT: i32 = 226;
pub const WSGREATDANE_CINT: i32 = 228;
pub const WSGREATDANE_CLONG: i32 = 230;
pub const WSGREATDANE_CINT64: i32 = 230;
pub const WSGREATDANE_CSIZE_T: i32 = 230;
pub const WSGREATDANE_CFLOAT: i32 = 244;
pub const WSGREATDANE_CDOUBLE: i32 = 246;
pub const WSGREATDANE_CLONGDOUBLE: i32 = 248;
pub const WSGREATDANE_WSSHORT: i32 = 226;
pub const WSGREATDANE_WSINT: i32 = 228;
pub const WSGREATDANE_WSLONG: i32 = 230;
pub const WSGREATDANE_WSINT64: i32 = 230;
pub const WSGREATDANE_WSSIZE_T: i32 = 230;
pub const WSGREATDANE_WSFLOAT: i32 = 244;
pub const WSGREATDANE_WSDOUBLE: i32 = 246;
pub const WSGREATDANE_WSLONGDOUBLE: i32 = 248;
pub const WSREDDOG_NUMERICS_ID: &[u8; 7usize] = b"reddog\0";
pub const WSREDDOG_CSHORT: i32 = 226;
pub const WSREDDOG_CINT: i32 = 228;
pub const WSREDDOG_CLONG: i32 = 228;
pub const WSREDDOG_CINT64: i32 = 196;
pub const WSREDDOG_CSIZE_T: i32 = 228;
pub const WSREDDOG_CFLOAT: i32 = 244;
pub const WSREDDOG_CDOUBLE: i32 = 246;
pub const WSREDDOG_CLONGDOUBLE: i32 = 218;
pub const WSREDDOG_WSSHORT: i32 = 226;
pub const WSREDDOG_WSINT: i32 = 228;
pub const WSREDDOG_WSLONG: i32 = 228;
pub const WSREDDOG_WSINT64: i32 = 196;
pub const WSREDDOG_WSSIZE_T: i32 = 228;
pub const WSREDDOG_WSFLOAT: i32 = 244;
pub const WSREDDOG_WSDOUBLE: i32 = 246;
pub const WSREDDOG_WSLONGDOUBLE: i32 = 218;
pub const WSAUSTRALIANCATTLEDOG_NUMERICS_ID: &[u8; 20usize] = b"australiancattledog\0";
pub const WSAUSTRALIANCATTLEDOG_CSHORT: i32 = 226;
pub const WSAUSTRALIANCATTLEDOG_CINT: i32 = 228;
pub const WSAUSTRALIANCATTLEDOG_CLONG: i32 = 230;
pub const WSAUSTRALIANCATTLEDOG_CINT64: i32 = 230;
pub const WSAUSTRALIANCATTLEDOG_CSIZE_T: i32 = 230;
pub const WSAUSTRALIANCATTLEDOG_CFLOAT: i32 = 244;
pub const WSAUSTRALIANCATTLEDOG_CDOUBLE: i32 = 246;
pub const WSAUSTRALIANCATTLEDOG_CLONGDOUBLE: i32 = 248;
pub const WSAUSTRALIANCATTLEDOG_WSSHORT: i32 = 226;
pub const WSAUSTRALIANCATTLEDOG_WSINT: i32 = 228;
pub const WSAUSTRALIANCATTLEDOG_WSLONG: i32 = 230;
pub const WSAUSTRALIANCATTLEDOG_WSINT64: i32 = 230;
pub const WSAUSTRALIANCATTLEDOG_WSSIZE_T: i32 = 230;
pub const WSAUSTRALIANCATTLEDOG_WSFLOAT: i32 = 244;
pub const WSAUSTRALIANCATTLEDOG_WSDOUBLE: i32 = 246;
pub const WSAUSTRALIANCATTLEDOG_WSLONGDOUBLE: i32 = 248;
pub const WSBOXER_NUMERICS_ID: &[u8; 6usize] = b"boxer\0";
pub const WSBOXER_CSHORT: i32 = 226;
pub const WSBOXER_CINT: i32 = 228;
pub const WSBOXER_CLONG: i32 = 230;
pub const WSBOXER_CINT64: i32 = 230;
pub const WSBOXER_CSIZE_T: i32 = 230;
pub const WSBOXER_CFLOAT: i32 = 244;
pub const WSBOXER_CDOUBLE: i32 = 246;
pub const WSBOXER_CLONGDOUBLE: i32 = 248;
pub const WSBOXER_WSSHORT: i32 = 226;
pub const WSBOXER_WSINT: i32 = 228;
pub const WSBOXER_WSLONG: i32 = 230;
pub const WSBOXER_WSINT64: i32 = 230;
pub const WSBOXER_WSSIZE_T: i32 = 230;
pub const WSBOXER_WSFLOAT: i32 = 244;
pub const WSBOXER_WSDOUBLE: i32 = 246;
pub const WSBOXER_WSLONGDOUBLE: i32 = 248;
pub const WSAKITAINU_NUMERICS_ID: &[u8; 9usize] = b"akitainu\0";
pub const WSAKITAINU_CSHORT: i32 = 226;
pub const WSAKITAINU_CINT: i32 = 228;
pub const WSAKITAINU_CLONG: i32 = 230;
pub const WSAKITAINU_CINT64: i32 = 230;
pub const WSAKITAINU_CSIZE_T: i32 = 230;
pub const WSAKITAINU_CFLOAT: i32 = 244;
pub const WSAKITAINU_CDOUBLE: i32 = 246;
pub const WSAKITAINU_CLONGDOUBLE: i32 = 246;
pub const WSAKITAINU_WSSHORT: i32 = 226;
pub const WSAKITAINU_WSINT: i32 = 228;
pub const WSAKITAINU_WSLONG: i32 = 230;
pub const WSAKITAINU_WSINT64: i32 = 230;
pub const WSAKITAINU_WSSIZE_T: i32 = 230;
pub const WSAKITAINU_WSFLOAT: i32 = 244;
pub const WSAKITAINU_WSDOUBLE: i32 = 246;
pub const WSAKITAINU_WSLONGDOUBLE: i32 = 246;
pub const WSCHIHUAHUA_NUMERICS_ID: &[u8; 10usize] = b"chihuahua\0";
pub const WSCHIHUAHUA_CSHORT: i32 = 226;
pub const WSCHIHUAHUA_CINT: i32 = 228;
pub const WSCHIHUAHUA_CLONG: i32 = 228;
pub const WSCHIHUAHUA_CINT64: i32 = 196;
pub const WSCHIHUAHUA_CSIZE_T: i32 = 228;
pub const WSCHIHUAHUA_CFLOAT: i32 = 244;
pub const WSCHIHUAHUA_CDOUBLE: i32 = 246;
pub const WSCHIHUAHUA_CLONGDOUBLE: i32 = 246;
pub const WSCHIHUAHUA_WSSHORT: i32 = 226;
pub const WSCHIHUAHUA_WSINT: i32 = 228;
pub const WSCHIHUAHUA_WSLONG: i32 = 228;
pub const WSCHIHUAHUA_WSINT64: i32 = 196;
pub const WSCHIHUAHUA_WSSIZE_T: i32 = 228;
pub const WSCHIHUAHUA_WSFLOAT: i32 = 244;
pub const WSCHIHUAHUA_WSDOUBLE: i32 = 246;
pub const WSCHIHUAHUA_WSLONGDOUBLE: i32 = 246;
pub const WSROTTWEILER_NUMERICS_ID: &[u8; 11usize] = b"rottweiler\0";
pub const WSROTTWEILER_CSHORT: i32 = 162;
pub const WSROTTWEILER_CINT: i32 = 164;
pub const WSROTTWEILER_CLONG: i32 = 164;
pub const WSROTTWEILER_CINT64: i32 = 197;
pub const WSROTTWEILER_CSIZE_T: i32 = 164;
pub const WSROTTWEILER_CFLOAT: i32 = 180;
pub const WSROTTWEILER_CDOUBLE: i32 = 182;
pub const WSROTTWEILER_CLONGDOUBLE: i32 = 182;
pub const WSROTTWEILER_WSSHORT: i32 = 162;
pub const WSROTTWEILER_WSINT: i32 = 164;
pub const WSROTTWEILER_WSLONG: i32 = 164;
pub const WSROTTWEILER_WSINT64: i32 = 197;
pub const WSROTTWEILER_WSSIZE_T: i32 = 164;
pub const WSROTTWEILER_WSFLOAT: i32 = 180;
pub const WSROTTWEILER_WSDOUBLE: i32 = 182;
pub const WSROTTWEILER_WSLONGDOUBLE: i32 = 182;
pub const WSPHARAOHHOUND_NUMERICS_ID: &[u8; 13usize] = b"pharaohhound\0";
pub const WSPHARAOHHOUND_CSHORT: i32 = 162;
pub const WSPHARAOHHOUND_CINT: i32 = 164;
pub const WSPHARAOHHOUND_CLONG: i32 = 166;
pub const WSPHARAOHHOUND_CINT64: i32 = 166;
pub const WSPHARAOHHOUND_CSIZE_T: i32 = 166;
pub const WSPHARAOHHOUND_CFLOAT: i32 = 180;
pub const WSPHARAOHHOUND_CDOUBLE: i32 = 182;
pub const WSPHARAOHHOUND_CLONGDOUBLE: i32 = 184;
pub const WSPHARAOHHOUND_WSSHORT: i32 = 162;
pub const WSPHARAOHHOUND_WSINT: i32 = 164;
pub const WSPHARAOHHOUND_WSLONG: i32 = 166;
pub const WSPHARAOHHOUND_WSINT64: i32 = 166;
pub const WSPHARAOHHOUND_WSSIZE_T: i32 = 166;
pub const WSPHARAOHHOUND_WSFLOAT: i32 = 180;
pub const WSPHARAOHHOUND_WSDOUBLE: i32 = 182;
pub const WSPHARAOHHOUND_WSLONGDOUBLE: i32 = 184;
pub const WSTROUT_NUMERICS_ID: &[u8; 6usize] = b"trout\0";
pub const WSTROUT_CSHORT: i32 = 162;
pub const WSTROUT_CINT: i32 = 164;
pub const WSTROUT_CLONG: i32 = 166;
pub const WSTROUT_CINT64: i32 = 166;
pub const WSTROUT_CSIZE_T: i32 = 166;
pub const WSTROUT_CFLOAT: i32 = 180;
pub const WSTROUT_CDOUBLE: i32 = 182;
pub const WSTROUT_CLONGDOUBLE: i32 = 182;
pub const WSTROUT_WSSHORT: i32 = 162;
pub const WSTROUT_WSINT: i32 = 164;
pub const WSTROUT_WSLONG: i32 = 166;
pub const WSTROUT_WSINT64: i32 = 166;
pub const WSTROUT_WSSIZE_T: i32 = 166;
pub const WSTROUT_WSFLOAT: i32 = 180;
pub const WSTROUT_WSDOUBLE: i32 = 182;
pub const WSTROUT_WSLONGDOUBLE: i32 = 182;
pub const WSPUG_NUMERICS_ID: &[u8; 4usize] = b"pug\0";
pub const WSPUG_CSHORT: i32 = 162;
pub const WSPUG_CINT: i32 = 164;
pub const WSPUG_CLONG: i32 = 164;
pub const WSPUG_CINT64: i32 = 197;
pub const WSPUG_CSIZE_T: i32 = 164;
pub const WSPUG_CFLOAT: i32 = 180;
pub const WSPUG_CDOUBLE: i32 = 182;
pub const WSPUG_CLONGDOUBLE: i32 = 184;
pub const WSPUG_WSSHORT: i32 = 162;
pub const WSPUG_WSINT: i32 = 164;
pub const WSPUG_WSLONG: i32 = 164;
pub const WSPUG_WSINT64: i32 = 197;
pub const WSPUG_WSSIZE_T: i32 = 164;
pub const WSPUG_WSFLOAT: i32 = 180;
pub const WSPUG_WSDOUBLE: i32 = 182;
pub const WSPUG_WSLONGDOUBLE: i32 = 184;
pub const WSPOINTER_NUMERICS_ID: &[u8; 8usize] = b"pointer\0";
pub const WSPOINTER_CSHORT: i32 = 162;
pub const WSPOINTER_CINT: i32 = 164;
pub const WSPOINTER_CLONG: i32 = 164;
pub const WSPOINTER_CINT64: i32 = 197;
pub const WSPOINTER_CSIZE_T: i32 = 164;
pub const WSPOINTER_CFLOAT: i32 = 180;
pub const WSPOINTER_CDOUBLE: i32 = 182;
pub const WSPOINTER_CLONGDOUBLE: i32 = 182;
pub const WSPOINTER_WSSHORT: i32 = 162;
pub const WSPOINTER_WSINT: i32 = 164;
pub const WSPOINTER_WSLONG: i32 = 164;
pub const WSPOINTER_WSINT64: i32 = 197;
pub const WSPOINTER_WSSIZE_T: i32 = 164;
pub const WSPOINTER_WSFLOAT: i32 = 180;
pub const WSPOINTER_WSDOUBLE: i32 = 182;
pub const WSPOINTER_WSLONGDOUBLE: i32 = 182;
pub const WSSAMOYED_NUMERICS_ID: &[u8; 8usize] = b"samoyed\0";
pub const WSSAMOYED_CSHORT: i32 = 162;
pub const WSSAMOYED_CINT: i32 = 164;
pub const WSSAMOYED_CLONG: i32 = 166;
pub const WSSAMOYED_CINT64: i32 = 166;
pub const WSSAMOYED_CSIZE_T: i32 = 166;
pub const WSSAMOYED_CFLOAT: i32 = 180;
pub const WSSAMOYED_CDOUBLE: i32 = 182;
pub const WSSAMOYED_CLONGDOUBLE: i32 = 184;
pub const WSSAMOYED_WSSHORT: i32 = 162;
pub const WSSAMOYED_WSINT: i32 = 164;
pub const WSSAMOYED_WSLONG: i32 = 166;
pub const WSSAMOYED_WSINT64: i32 = 166;
pub const WSSAMOYED_WSSIZE_T: i32 = 166;
pub const WSSAMOYED_WSFLOAT: i32 = 180;
pub const WSSAMOYED_WSDOUBLE: i32 = 182;
pub const WSSAMOYED_WSLONGDOUBLE: i32 = 184;
pub const WSSIBERIANHUSKY_NUMERICS_ID: &[u8; 14usize] = b"siberianhusky\0";
pub const WSSIBERIANHUSKY_CSHORT: i32 = 162;
pub const WSSIBERIANHUSKY_CINT: i32 = 164;
pub const WSSIBERIANHUSKY_CLONG: i32 = 164;
pub const WSSIBERIANHUSKY_CINT64: i32 = 197;
pub const WSSIBERIANHUSKY_CSIZE_T: i32 = 164;
pub const WSSIBERIANHUSKY_CFLOAT: i32 = 180;
pub const WSSIBERIANHUSKY_CDOUBLE: i32 = 182;
pub const WSSIBERIANHUSKY_CLONGDOUBLE: i32 = 184;
pub const WSSIBERIANHUSKY_WSSHORT: i32 = 162;
pub const WSSIBERIANHUSKY_WSINT: i32 = 164;
pub const WSSIBERIANHUSKY_WSLONG: i32 = 164;
pub const WSSIBERIANHUSKY_WSINT64: i32 = 197;
pub const WSSIBERIANHUSKY_WSSIZE_T: i32 = 164;
pub const WSSIBERIANHUSKY_WSFLOAT: i32 = 180;
pub const WSSIBERIANHUSKY_WSDOUBLE: i32 = 182;
pub const WSSIBERIANHUSKY_WSLONGDOUBLE: i32 = 184;
pub const WSSHIBAINU_NUMERICS_ID: &[u8; 9usize] = b"shibainu\0";
pub const WSSHIBAINU_CSHORT: i32 = 226;
pub const WSSHIBAINU_CINT: i32 = 228;
pub const WSSHIBAINU_CLONG: i32 = 230;
pub const WSSHIBAINU_CINT64: i32 = 230;
pub const WSSHIBAINU_CSIZE_T: i32 = 230;
pub const WSSHIBAINU_CFLOAT: i32 = 244;
pub const WSSHIBAINU_CDOUBLE: i32 = 246;
pub const WSSHIBAINU_CLONGDOUBLE: i32 = 248;
pub const WSSHIBAINU_WSSHORT: i32 = 226;
pub const WSSHIBAINU_WSINT: i32 = 228;
pub const WSSHIBAINU_WSLONG: i32 = 230;
pub const WSSHIBAINU_WSINT64: i32 = 230;
pub const WSSHIBAINU_WSSIZE_T: i32 = 230;
pub const WSSHIBAINU_WSFLOAT: i32 = 244;
pub const WSSHIBAINU_WSDOUBLE: i32 = 246;
pub const WSSHIBAINU_WSLONGDOUBLE: i32 = 248;
pub const WSNEWFOUNDLAND_NUMERICS_ID: &[u8; 13usize] = b"newfoundland\0";
pub const WSNEWFOUNDLAND_CSHORT: i32 = 162;
pub const WSNEWFOUNDLAND_CINT: i32 = 164;
pub const WSNEWFOUNDLAND_CLONG: i32 = 164;
pub const WSNEWFOUNDLAND_CINT64: i32 = 197;
pub const WSNEWFOUNDLAND_CSIZE_T: i32 = 164;
pub const WSNEWFOUNDLAND_CFLOAT: i32 = 180;
pub const WSNEWFOUNDLAND_CDOUBLE: i32 = 182;
pub const WSNEWFOUNDLAND_CLONGDOUBLE: i32 = 184;
pub const WSNEWFOUNDLAND_WSSHORT: i32 = 162;
pub const WSNEWFOUNDLAND_WSINT: i32 = 164;
pub const WSNEWFOUNDLAND_WSLONG: i32 = 164;
pub const WSNEWFOUNDLAND_WSINT64: i32 = 197;
pub const WSNEWFOUNDLAND_WSSIZE_T: i32 = 164;
pub const WSNEWFOUNDLAND_WSFLOAT: i32 = 180;
pub const WSNEWFOUNDLAND_WSDOUBLE: i32 = 182;
pub const WSNEWFOUNDLAND_WSLONGDOUBLE: i32 = 184;
pub const WSAFFENPINSCHER_NUMERICS_ID: &[u8; 14usize] = b"affenpinscher\0";
pub const WSAFFENPINSCHER_CSHORT: i32 = 162;
pub const WSAFFENPINSCHER_CINT: i32 = 164;
pub const WSAFFENPINSCHER_CLONG: i32 = 166;
pub const WSAFFENPINSCHER_CINT64: i32 = 166;
pub const WSAFFENPINSCHER_CSIZE_T: i32 = 166;
pub const WSAFFENPINSCHER_CFLOAT: i32 = 180;
pub const WSAFFENPINSCHER_CDOUBLE: i32 = 182;
pub const WSAFFENPINSCHER_CLONGDOUBLE: i32 = 184;
pub const WSAFFENPINSCHER_WSSHORT: i32 = 162;
pub const WSAFFENPINSCHER_WSINT: i32 = 164;
pub const WSAFFENPINSCHER_WSLONG: i32 = 166;
pub const WSAFFENPINSCHER_WSINT64: i32 = 166;
pub const WSAFFENPINSCHER_WSSIZE_T: i32 = 166;
pub const WSAFFENPINSCHER_WSFLOAT: i32 = 180;
pub const WSAFFENPINSCHER_WSDOUBLE: i32 = 182;
pub const WSAFFENPINSCHER_WSLONGDOUBLE: i32 = 184;
pub const WSBEAUCERON_NUMERICS_ID: &[u8; 10usize] = b"beauceron\0";
pub const WSBEAUCERON_CSHORT: i32 = 226;
pub const WSBEAUCERON_CINT: i32 = 228;
pub const WSBEAUCERON_CLONG: i32 = 228;
pub const WSBEAUCERON_CINT64: i32 = 230;
pub const WSBEAUCERON_CSIZE_T: i32 = 228;
pub const WSBEAUCERON_CFLOAT: i32 = 244;
pub const WSBEAUCERON_CDOUBLE: i32 = 246;
pub const WSBEAUCERON_CLONGDOUBLE: i32 = 246;
pub const WSBEAUCERON_WSSHORT: i32 = 226;
pub const WSBEAUCERON_WSINT: i32 = 228;
pub const WSBEAUCERON_WSLONG: i32 = 228;
pub const WSBEAUCERON_WSINT64: i32 = 230;
pub const WSBEAUCERON_WSSIZE_T: i32 = 228;
pub const WSBEAUCERON_WSFLOAT: i32 = 244;
pub const WSBEAUCERON_WSDOUBLE: i32 = 246;
pub const WSBEAUCERON_WSLONGDOUBLE: i32 = 246;
pub const WSBERGAMASCO_NUMERICS_ID: &[u8; 11usize] = b"bergamasco\0";
pub const WSBERGAMASCO_CSHORT: i32 = 226;
pub const WSBERGAMASCO_CINT: i32 = 228;
pub const WSBERGAMASCO_CLONG: i32 = 228;
pub const WSBERGAMASCO_CINT64: i32 = 230;
pub const WSBERGAMASCO_CSIZE_T: i32 = 228;
pub const WSBERGAMASCO_CFLOAT: i32 = 244;
pub const WSBERGAMASCO_CDOUBLE: i32 = 246;
pub const WSBERGAMASCO_CLONGDOUBLE: i32 = 218;
pub const WSBERGAMASCO_WSSHORT: i32 = 226;
pub const WSBERGAMASCO_WSINT: i32 = 228;
pub const WSBERGAMASCO_WSLONG: i32 = 228;
pub const WSBERGAMASCO_WSINT64: i32 = 230;
pub const WSBERGAMASCO_WSSIZE_T: i32 = 228;
pub const WSBERGAMASCO_WSFLOAT: i32 = 244;
pub const WSBERGAMASCO_WSDOUBLE: i32 = 246;
pub const WSBERGAMASCO_WSLONGDOUBLE: i32 = 218;
pub const WSBOERBOEL_NUMERICS_ID: &[u8; 9usize] = b"boerboel\0";
pub const WSBOERBOEL_CSHORT: i32 = 226;
pub const WSBOERBOEL_CINT: i32 = 228;
pub const WSBOERBOEL_CLONG: i32 = 228;
pub const WSBOERBOEL_CINT64: i32 = 230;
pub const WSBOERBOEL_CSIZE_T: i32 = 228;
pub const WSBOERBOEL_CFLOAT: i32 = 244;
pub const WSBOERBOEL_CDOUBLE: i32 = 246;
pub const WSBOERBOEL_CLONGDOUBLE: i32 = 246;
pub const WSBOERBOEL_WSSHORT: i32 = 226;
pub const WSBOERBOEL_WSINT: i32 = 228;
pub const WSBOERBOEL_WSLONG: i32 = 228;
pub const WSBOERBOEL_WSINT64: i32 = 230;
pub const WSBOERBOEL_WSSIZE_T: i32 = 228;
pub const WSBOERBOEL_WSFLOAT: i32 = 244;
pub const WSBOERBOEL_WSDOUBLE: i32 = 246;
pub const WSBOERBOEL_WSLONGDOUBLE: i32 = 246;
pub const WSCHINOOK_NUMERICS_ID: &[u8; 8usize] = b"chinook\0";
pub const WSCHINOOK_CSHORT: i32 = 226;
pub const WSCHINOOK_CINT: i32 = 228;
pub const WSCHINOOK_CLONG: i32 = 228;
pub const WSCHINOOK_CINT64: i32 = 230;
pub const WSCHINOOK_CSIZE_T: i32 = 228;
pub const WSCHINOOK_CFLOAT: i32 = 244;
pub const WSCHINOOK_CDOUBLE: i32 = 246;
pub const WSCHINOOK_CLONGDOUBLE: i32 = 246;
pub const WSCHINOOK_WSSHORT: i32 = 226;
pub const WSCHINOOK_WSINT: i32 = 228;
pub const WSCHINOOK_WSLONG: i32 = 228;
pub const WSCHINOOK_WSINT64: i32 = 230;
pub const WSCHINOOK_WSSIZE_T: i32 = 228;
pub const WSCHINOOK_WSFLOAT: i32 = 244;
pub const WSCHINOOK_WSDOUBLE: i32 = 246;
pub const WSCHINOOK_WSLONGDOUBLE: i32 = 246;
pub const WSOLD_WIN_ENV_NUMERICS_ID: &[u8; 22usize] = b"Sep 13 1996, 13:46:34\0";
pub const WSOLD_WIN_ENV_CSHORT: i32 = 193;
pub const WSOLD_WIN_ENV_CINT: i32 = 194;
pub const WSOLD_WIN_ENV_CLONG: i32 = 195;
pub const WSOLD_WIN_ENV_CINT64: i32 = 196;
pub const WSOLD_WIN_ENV_CSIZE_T: i32 = 195;
pub const WSOLD_WIN_ENV_CFLOAT: i32 = 209;
pub const WSOLD_WIN_ENV_CDOUBLE: i32 = 210;
pub const WSOLD_WIN_ENV_CLONGDOUBLE: i32 = 211;
pub const WSOLD_WIN_ENV_WSSHORT: i32 = 193;
pub const WSOLD_WIN_ENV_WSINT: i32 = 194;
pub const WSOLD_WIN_ENV_WSLONG: i32 = 195;
pub const WSOLD_WIN_ENV_WSINT64: i32 = 196;
pub const WSOLD_WIN_ENV_WSSIZE_T: i32 = 195;
pub const WSOLD_WIN_ENV_WSFLOAT: i32 = 209;
pub const WSOLD_WIN_ENV_WSDOUBLE: i32 = 210;
pub const WSOLD_WIN_ENV_WSLONGDOUBLE: i32 = 211;
pub const WSTK_CUCHAR: i32 = 161;
pub const WSTK_WSUCHAR: i32 = 161;
pub const WSTP_NUMERICS_ENVIRONMENT_ID: &[u8; 6usize] = b"boxer\0";
pub const WSTK_CSHORT: i32 = 226;
pub const WSTK_CINT: i32 = 228;
pub const WSTK_CLONG: i32 = 230;
pub const WSTK_CINT64: i32 = 230;
pub const WSTK_CSIZE_T: i32 = 230;
pub const WSTK_CFLOAT: i32 = 244;
pub const WSTK_CDOUBLE: i32 = 246;
pub const WSTK_CLONGDOUBLE: i32 = 248;
pub const WSTK_WSSHORT: i32 = 226;
pub const WSTK_WSINT: i32 = 228;
pub const WSTK_WSLONG: i32 = 230;
pub const WSTK_WSINT64: i32 = 230;
pub const WSTK_WSSIZE_T: i32 = 230;
pub const WSTK_WSFLOAT: i32 = 244;
pub const WSTK_WSDOUBLE: i32 = 246;
pub const WSTK_WSLONGDOUBLE: i32 = 248;
pub const MLVERSION: i32 = 6;
pub const MLREVISION: i32 = 46;
pub const MLCREATIONID: i32 = 114411;
pub const MLAPI1REVISION: i32 = 1;
pub const MLAPI2REVISION: i32 = 6;
pub const MLAPI3REVISION: i32 = 16;
pub const MLAPI4REVISION: i32 = 25;
pub const MLAPIREVISION: i32 = 25;
pub const MLOLDDEFINITION: i32 = 1;
pub const MLSTDWORLD_INIT: i32 = 16;
pub const MLSTDWORLD_DEINIT: i32 = 17;
pub const MLSTDWORLD_MAKE: i32 = 18;
pub const MLSTDWORLD_GET_SIGNAL_HANDLERS: i32 = 29;
pub const MLSTDWORLD_RELEASE_SIGNAL_HANDLERS: i32 = 30;
pub const MLSTDWORLD_PROTOCOL: i32 = 31;
pub const MLSTDWORLD_MODES: i32 = 32;
pub const MLSTDWORLD_STREAMCAPACITY: i32 = 33;
pub const MLSTDWORLD_ID: i32 = 34;
pub const MLSTDDEV_CONNECT_READY: i32 = 19;
pub const MLSTDDEV_CONNECT: i32 = 20;
pub const MLSTDDEV_DESTROY: i32 = 21;
pub const MLSTDDEV_SET_YIELDER: i32 = 22;
pub const MLSTDDEV_GET_YIELDER: i32 = 23;
pub const MLSTDDEV_WRITE_MSG: i32 = 24;
pub const MLSTDDEV_HAS_MSG: i32 = 25;
pub const MLSTDDEV_READ_MSG: i32 = 26;
pub const MLSTDDEV_SET_HANDLER: i32 = 27;
pub const MLSTDDEV_GET_HANDLER: i32 = 28;
pub const T_WORLD_INIT: i32 = 16;
pub const T_WORLD_DEINIT: i32 = 17;
pub const T_WORLD_MAKE: i32 = 18;
pub const T_DEV_CONNECT_READY: i32 = 19;
pub const T_DEV_CONNECT: i32 = 20;
pub const T_DEV_DESTROY: i32 = 21;
pub const T_DEV_SET_YIELDER: i32 = 22;
pub const T_DEV_GET_YIELDER: i32 = 23;
pub const T_DEV_WRITE_MSG: i32 = 24;
pub const T_DEV_HAS_MSG: i32 = 25;
pub const T_DEV_READ_MSG: i32 = 26;
pub const T_DEV_SET_HANDLER: i32 = 27;
pub const T_DEV_GET_HANDLER: i32 = 28;
pub const INFO_MASK: i64 = 2147483648;
pub const INFO_TYPE_MASK: i32 = 2147483647;
pub const INFO_SWITCH_MASK: i32 = 1073741824;
pub const MLDEVICE_MASK: i64 = 2147483648;
pub const WORLD_MASK: i64 = 3221225472;
pub const UNREGISTERED_TYPE: i32 = 0;
pub const UNIXPIPE_TYPE: i32 = 1;
pub const UNIXSOCKET_TYPE: i32 = 2;
pub const LOOPBACK_TYPE: i32 = 5;
pub const WINLOCAL_TYPE: i32 = 9;
pub const WINFMAP_TYPE: i32 = 10;
pub const WINSHM_TYPE: i32 = 11;
pub const SOCKET2_TYPE: i32 = 12;
pub const GENERIC_TYPE: i32 = 13;
pub const UNIXSHM_TYPE: i32 = 14;
pub const INTRAPROCESS_TYPE: i32 = 15;
pub const MLDEVICE_TYPE: i64 = 2147483648;
pub const MLDEVICE_NAME: i64 = 2147483649;
pub const MLDEVICE_NAME_SIZE: i64 = 2147483650;
pub const MLDEVICE_WORLD_ID: i64 = 2147483653;
pub const SHM_FD: i64 = 2147487232;
pub const PIPE_FD: i64 = 2147483904;
pub const PIPE_CHILD_PID: i64 = 2147483905;
pub const SOCKET_FD: i64 = 2147484160;
pub const INTRA_FD: i64 = 2147487488;
pub const SOCKET_PARTNER_ADDR: i64 = 2147484161;
pub const SOCKET_PARTNER_PORT: i64 = 2147484162;
pub const LOOPBACK_FD: i64 = 2147484928;
pub const INTRAPROCESS_FD: i64 = 2147487488;
pub const WINDOWS_SET_NOTIFY_WINDOW: i64 = 2147485978;
pub const WINDOWS_REMOVE_NOTIFY_WINDOW: i64 = 2147485979;
pub const WINDOWS_READY_CONDITION: i64 = 2147485980;
pub const WORLD_THISLOCATION: i64 = 3221225473;
pub const WORLD_MODES: i64 = 3221225474;
pub const WORLD_PROTONAME: i64 = 3221225475;
pub const WORLD_STREAMCAPACITY: i64 = 3221225476;
pub const WORLD_ID: i64 = 3221225477;
pub const MLDEVICE_MODE: i64 = 2147483654;
pub const MLDEVICE_OPTIONS: i64 = 2147483655;
pub const YIELDVERSION: i32 = 1;
pub const INTERNAL_YIELDING: i32 = 0;
pub const MAKE_YIELDING: i32 = 1;
pub const CONNECT_YIELDING: i32 = 2;
pub const READ_YIELDING: i32 = 3;
pub const WRITE_YIELDING: i32 = 4;
pub const DESTROY_YIELDING: i32 = 5;
pub const READY_YIELDING: i32 = 6;
pub const MAX_SLEEP: i32 = 600;
pub const MLPARAMETERSIZE_R1: i32 = 256;
pub const MLPARAMETERSIZE: i32 = 356;
pub const MLASCII_ENC: i32 = 1;
pub const MLBYTES_ENC: i32 = 2;
pub const MLUCS2_ENC: i32 = 3;
pub const MLOLD_ENC: i32 = 4;
pub const MLUTF8_ENC: i32 = 5;
pub const MLUTF16_ENC: i32 = 6;
pub const MLUTF32_ENC: i32 = 8;
pub const MLTOTAL_TEXT_ENCODINGS: i32 = 8;
pub const MLLOGERROR: i32 = 0;
pub const MLLOGWARNING: i32 = 1;
pub const MLLOGNOTICE: i32 = 2;
pub const MLLOGINFO: i32 = 3;
pub const MLLOGDEBUG: i32 = 4;
pub const MLLOGDEBUG1: i32 = 5;
pub const MLLOGDEBUG2: i32 = 6;
pub const MLLOGDEBUG3: i32 = 7;
pub const MLLOGDEBUG4: i32 = 8;
pub const MLNTESTPOINTS: i32 = 1;
pub const MLSDADDSERVICE: i32 = 1;
pub const MLSDREMOVESERVICE: i32 = 2;
pub const MLSDBROWSEERROR: i32 = 3;
pub const MLSDRESOLVEERROR: i32 = 4;
pub const MLSDREGISTERERROR: i32 = 5;
pub const MLSDMORECOMING: i32 = 16;
pub const MLSDNAMECONFLICT: i32 = 7;
pub const WSEUNKNOWN: i32 = -1;
pub const WSEOK: i32 = 0;
pub const WSEDEAD: i32 = 1;
pub const WSEGBAD: i32 = 2;
pub const WSEGSEQ: i32 = 3;
pub const WSEPBTK: i32 = 4;
pub const WSEPSEQ: i32 = 5;
pub const WSEPBIG: i32 = 6;
pub const WSEOVFL: i32 = 7;
pub const WSEMEM: i32 = 8;
pub const WSEACCEPT: i32 = 9;
pub const WSECONNECT: i32 = 10;
pub const WSECLOSED: i32 = 11;
pub const WSEDEPTH: i32 = 12;
pub const WSENODUPFCN: i32 = 13;
pub const WSENOACK: i32 = 15;
pub const WSENODATA: i32 = 16;
pub const WSENOTDELIVERED: i32 = 17;
pub const WSENOMSG: i32 = 18;
pub const WSEFAILED: i32 = 19;
pub const WSEGETENDEXPR: i32 = 20;
pub const WSEPUTENDPACKET: i32 = 21;
pub const WSENEXTPACKET: i32 = 22;
pub const WSEUNKNOWNPACKET: i32 = 23;
pub const WSEGETENDPACKET: i32 = 24;
pub const WSEABORT: i32 = 25;
pub const WSEMORE: i32 = 26;
pub const WSENEWLIB: i32 = 27;
pub const WSEOLDLIB: i32 = 28;
pub const WSEBADPARAM: i32 = 29;
pub const WSENOTIMPLEMENTED: i32 = 30;
pub const WSEINIT: i32 = 32;
pub const WSEARGV: i32 = 33;
pub const WSEPROTOCOL: i32 = 34;
pub const WSEMODE: i32 = 35;
pub const WSELAUNCH: i32 = 36;
pub const WSELAUNCHAGAIN: i32 = 37;
pub const WSELAUNCHSPACE: i32 = 38;
pub const WSENOPARENT: i32 = 39;
pub const WSENAMETAKEN: i32 = 40;
pub const WSENOLISTEN: i32 = 41;
pub const WSEBADNAME: i32 = 42;
pub const WSEBADHOST: i32 = 43;
pub const WSERESOURCE: i32 = 44;
pub const WSELAUNCHFAILED: i32 = 45;
pub const WSELAUNCHNAME: i32 = 46;
pub const WSEPDATABAD: i32 = 47;
pub const WSEPSCONVERT: i32 = 48;
pub const WSEGSCONVERT: i32 = 49;
pub const WSENOTEXE: i32 = 50;
pub const WSESYNCOBJECTMAKE: i32 = 51;
pub const WSEBACKOUT: i32 = 52;
pub const WSEBADOPTSYM: i32 = 53;
pub const WSEBADOPTSTR: i32 = 54;
pub const WSENEEDBIGGERBUFFER: i32 = 55;
pub const WSEBADNUMERICSID: i32 = 56;
pub const WSESERVICENOTAVAILABLE: i32 = 57;
pub const WSEBADARGUMENT: i32 = 58;
pub const WSEBADDISCOVERYHOSTNAME: i32 = 59;
pub const WSEBADDISCOVERYDOMAINNAME: i32 = 60;
pub const WSEBADSERVICENAME: i32 = 61;
pub const WSEBADDISCOVERYSTATE: i32 = 62;
pub const WSEBADDISCOVERYFLAGS: i32 = 63;
pub const WSEDISCOVERYNAMECOLLISION: i32 = 64;
pub const WSEBADSERVICEDISCOVERY: i32 = 65;
pub const WSELAST: i32 = 57;
pub const WSETRACEON: i32 = 996;
pub const WSETRACEOFF: i32 = 997;
pub const WSEDEBUG: i32 = 998;
pub const WSEASSERT: i32 = 999;
pub const WSEUSER: i32 = 1000;
pub const MLEUNKNOWN: i32 = -1;
pub const MLEOK: i32 = 0;
pub const MLEDEAD: i32 = 1;
pub const MLEGBAD: i32 = 2;
pub const MLEGSEQ: i32 = 3;
pub const MLEPBTK: i32 = 4;
pub const MLEPSEQ: i32 = 5;
pub const MLEPBIG: i32 = 6;
pub const MLEOVFL: i32 = 7;
pub const MLEMEM: i32 = 8;
pub const MLEACCEPT: i32 = 9;
pub const MLECONNECT: i32 = 10;
pub const MLECLOSED: i32 = 11;
pub const MLEDEPTH: i32 = 12;
pub const MLENODUPFCN: i32 = 13;
pub const MLENOACK: i32 = 15;
pub const MLENODATA: i32 = 16;
pub const MLENOTDELIVERED: i32 = 17;
pub const MLENOMSG: i32 = 18;
pub const MLEFAILED: i32 = 19;
pub const MLEGETENDEXPR: i32 = 20;
pub const MLEPUTENDPACKET: i32 = 21;
pub const MLENEXTPACKET: i32 = 22;
pub const MLEUNKNOWNPACKET: i32 = 23;
pub const MLEGETENDPACKET: i32 = 24;
pub const MLEABORT: i32 = 25;
pub const MLEMORE: i32 = 26;
pub const MLENEWLIB: i32 = 27;
pub const MLEOLDLIB: i32 = 28;
pub const MLEBADPARAM: i32 = 29;
pub const MLENOTIMPLEMENTED: i32 = 30;
pub const MLEINIT: i32 = 32;
pub const MLEARGV: i32 = 33;
pub const MLEPROTOCOL: i32 = 34;
pub const MLEMODE: i32 = 35;
pub const MLELAUNCH: i32 = 36;
pub const MLELAUNCHAGAIN: i32 = 37;
pub const MLELAUNCHSPACE: i32 = 38;
pub const MLENOPARENT: i32 = 39;
pub const MLENAMETAKEN: i32 = 40;
pub const MLENOLISTEN: i32 = 41;
pub const MLEBADNAME: i32 = 42;
pub const MLEBADHOST: i32 = 43;
pub const MLERESOURCE: i32 = 44;
pub const MLELAUNCHFAILED: i32 = 45;
pub const MLELAUNCHNAME: i32 = 46;
pub const MLEPDATABAD: i32 = 47;
pub const MLEPSCONVERT: i32 = 48;
pub const MLEGSCONVERT: i32 = 49;
pub const MLENOTEXE: i32 = 50;
pub const MLESYNCOBJECTMAKE: i32 = 51;
pub const MLEBACKOUT: i32 = 52;
pub const MLEBADOPTSYM: i32 = 53;
pub const MLEBADOPTSTR: i32 = 54;
pub const MLENEEDBIGGERBUFFER: i32 = 55;
pub const MLEBADNUMERICSID: i32 = 56;
pub const MLESERVICENOTAVAILABLE: i32 = 57;
pub const MLEBADARGUMENT: i32 = 58;
pub const MLEBADDISCOVERYHOSTNAME: i32 = 59;
pub const MLEBADDISCOVERYDOMAINNAME: i32 = 60;
pub const MLEBADSERVICENAME: i32 = 61;
pub const MLEBADDISCOVERYSTATE: i32 = 62;
pub const MLEBADDISCOVERYFLAGS: i32 = 63;
pub const MLEDISCOVERYNAMECOLLISION: i32 = 64;
pub const MLEBADSERVICEDISCOVERY: i32 = 65;
pub const MLELAST: i32 = 57;
pub const MLETRACEON: i32 = 996;
pub const MLETRACEOFF: i32 = 997;
pub const MLEDEBUG: i32 = 998;
pub const MLEASSERT: i32 = 999;
pub const MLEUSER: i32 = 1000;
pub const WSTKOLDINT: u8 = 73u8;
pub const WSTKOLDREAL: u8 = 82u8;
pub const WSTKFUNC: u8 = 70u8;
pub const WSTKERROR: i32 = 0;
pub const WSTKERR: i32 = 0;
pub const WSTKSTR: u8 = 34u8;
pub const WSTKSYM: u8 = 35u8;
pub const WSTKOPTSYM: u8 = 79u8;
pub const WSTKOPTSTR: u8 = 81u8;
pub const WSTKREAL: u8 = 42u8;
pub const WSTKINT: u8 = 43u8;
pub const WSTKPCTEND: u8 = 93u8;
pub const WSTKAPCTEND: u8 = 10u8;
pub const WSTKEND: u8 = 10u8;
pub const WSTKAEND: u8 = 13u8;
pub const WSTKSEND: u8 = 44u8;
pub const WSTKCONT: u8 = 92u8;
pub const WSTKELEN: u8 = 32u8;
pub const WSTKNULL: u8 = 46u8;
pub const WSTKOLDSYM: u8 = 89u8;
pub const WSTKOLDSTR: u8 = 83u8;
pub const WSTKPACKED: u8 = 80u8;
pub const WSTKARRAY: u8 = 65u8;
pub const WSTKDIM: u8 = 68u8;
pub const WSTK_FIRSTUSER: u8 = 48u8;
pub const WSTK_LASTUSER: u8 = 63u8;
pub const MAX_BYTES_PER_OLD_CHARACTER: i32 = 3;
pub const MAX_BYTES_PER_NEW_CHARACTER: i32 = 10;
pub const WS_MAX_BYTES_PER_CHARACTER: i32 = 10;
pub const ML_USES_NEW_PUTBYTEARRAY_API: i32 = 1;
pub const ILLEGALPKT: i32 = 0;
pub const CALLPKT: i32 = 7;
pub const EVALUATEPKT: i32 = 13;
pub const RETURNPKT: i32 = 3;
pub const INPUTNAMEPKT: i32 = 8;
pub const ENTERTEXTPKT: i32 = 14;
pub const ENTEREXPRPKT: i32 = 15;
pub const OUTPUTNAMEPKT: i32 = 9;
pub const RETURNTEXTPKT: i32 = 4;
pub const RETURNEXPRPKT: i32 = 16;
pub const DISPLAYPKT: i32 = 11;
pub const DISPLAYENDPKT: i32 = 12;
pub const MESSAGEPKT: i32 = 5;
pub const TEXTPKT: i32 = 2;
pub const INPUTPKT: i32 = 1;
pub const INPUTSTRPKT: i32 = 21;
pub const MENUPKT: i32 = 6;
pub const SYNTAXPKT: i32 = 10;
pub const SUSPENDPKT: i32 = 17;
pub const RESUMEPKT: i32 = 18;
pub const BEGINDLGPKT: i32 = 19;
pub const ENDDLGPKT: i32 = 20;
pub const FIRSTUSERPKT: i32 = 128;
pub const LASTUSERPKT: i32 = 255;
pub const MLREADYPARALLELERROR: i32 = -1;
pub const MLREADYPARALLELTIMEDOUT: i32 = -2;
pub const MLREADYPARALLELINVALIDARGUMENT: i32 = -3;
pub const MLWAITSUCCESS: i32 = 1;
pub const MLWAITERROR: i32 = 2;
pub const MLWAITTIMEOUT: i32 = 3;
pub const MLWAITCALLBACKABORTED: i32 = 4;
pub type wint = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wint {
    pub low: wint,
    pub hi: wint,
}
#[test]
fn bindgen_test_layout__wint() {
    const UNINIT: ::std::mem::MaybeUninit<_wint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_wint>(),
        8usize,
        concat!("Size of: ", stringify!(_wint))
    );
    assert_eq!(
        ::std::mem::align_of::<_wint>(),
        4usize,
        concat!("Alignment of ", stringify!(_wint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wint),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_wint), "::", stringify!(hi))
    );
}
pub type wint64 = _wint;
pub type mllong32 = ::std::os::raw::c_int;
pub type wslong32 = ::std::os::raw::c_int;
pub type mlulong32 = ::std::os::raw::c_uint;
pub type wsulong32 = ::std::os::raw::c_uint;
pub type wsint64 = ::std::os::raw::c_long;
pub type mluint64 = ::std::os::raw::c_ulong;
pub type wsuint64 = ::std::os::raw::c_ulong;
pub type mlbigint = wsint64;
pub type mlbiguint = mluint64;
pub type uchar_ct = ::std::os::raw::c_uchar;
pub type ucharp_ct = *mut uchar_ct;
pub type ucharpp_ct = *mut ucharp_ct;
pub type ucharppp_ct = *mut ucharpp_ct;
pub type ushort_ct = ::std::os::raw::c_ushort;
pub type ushortp_ct = *mut ushort_ct;
pub type ushortpp_ct = *mut ushortp_ct;
pub type ushortppp_ct = *mut ushortpp_ct;
pub type uint_ct = ::std::os::raw::c_uint;
pub type uintp_ct = *mut ::std::os::raw::c_uint;
pub type uintpp_ct = *mut uintp_ct;
pub type int_ct = ::std::os::raw::c_int;
pub type voidp_ct = *mut ::std::os::raw::c_void;
pub type voidpp_ct = *mut voidp_ct;
pub type charp_ct = *mut ::std::os::raw::c_char;
pub type charpp_ct = *mut charp_ct;
pub type charppp_ct = *mut charpp_ct;
pub type long_ct = ::std::os::raw::c_long;
pub type longp_ct = *mut long_ct;
pub type longpp_ct = *mut longp_ct;
pub type ulong_ct = ::std::os::raw::c_ulong;
pub type ulongp_ct = *mut ulong_ct;
pub type kushortp_ct = *const ::std::os::raw::c_ushort;
pub type kushortpp_ct = *mut *const ::std::os::raw::c_ushort;
pub type kuintp_ct = *const ::std::os::raw::c_uint;
pub type kuintpp_ct = *mut *const ::std::os::raw::c_uint;
pub type kucharp_ct = *const ::std::os::raw::c_uchar;
pub type kucharpp_ct = *mut *const ::std::os::raw::c_uchar;
pub type kcharp_ct = *const ::std::os::raw::c_char;
pub type kcharpp_ct = *mut *const ::std::os::raw::c_char;
pub type kvoidp_ct = *const ::std::os::raw::c_void;
pub type WSPointer = *mut ::std::os::raw::c_void;
pub type MLENVPARAM = *mut ::std::os::raw::c_void;
pub type WSEnvironmentParameter = MLENVPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ml_environment {
    _unused: [u8; 0],
}
pub type WSENV = *mut ml_environment;
pub type WSEnvironment = WSENV;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MLink {
    _unused: [u8; 0],
}
pub type WSLINK = *mut MLink;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MLinkMark {
    _unused: [u8; 0],
}
pub type WSMARK = *mut MLinkMark;
pub type MLINKMark = WSMARK;
pub type mlapi_token = int_ct;
pub type mlapi__token = ::std::os::raw::c_ulong;
pub type mlapi__tokenp = *mut mlapi__token;
pub type wsapi_packet = int_ct;
pub type mlapi_error = ::std::os::raw::c_long;
pub type mlapi__error = ::std::os::raw::c_long;
pub type long_st = ::std::os::raw::c_long;
pub type longp_st = longp_ct;
pub type longpp_st = *mut longp_st;
pub type long_et = ::std::os::raw::c_long;
pub type mlapi_result = int_ct;
pub type __MLProcPtr__ =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_long>;
pub type dev_voidp = *mut ::std::os::raw::c_void;
pub type dev_type = dev_voidp;
pub type dev_typep = *mut dev_type;
pub type devproc_error = ::std::os::raw::c_long;
pub type devproc_selector = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct read_buf {
    pub length: ::std::os::raw::c_ushort,
    pub ptr: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_read_buf() {
    const UNINIT: ::std::mem::MaybeUninit<read_buf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<read_buf>(),
        16usize,
        concat!("Size of: ", stringify!(read_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<read_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(read_buf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(read_buf),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(read_buf),
            "::",
            stringify!(ptr)
        )
    );
}
pub type read_bufp = *mut read_buf;
pub type read_bufpp = *mut read_bufp;
pub type MLDeviceProcPtr = ::std::option::Option<
    unsafe extern "C" fn(
        dev: dev_type,
        selector: devproc_selector,
        p1: dev_voidp,
        p2: dev_voidp,
    ) -> devproc_error,
>;
extern "C" {
    pub fn MLDeviceMain(
        dev: dev_type,
        selector: devproc_selector,
        p1: dev_voidp,
        p2: dev_voidp,
    ) -> devproc_error;
}
pub type MLDeviceUPP = MLDeviceProcPtr;
pub type dev_main_type = MLDeviceUPP;
pub type dev_main_typep = *mut dev_main_type;
pub type WSAllocatorProcPtr = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void,
>;
pub type MLAllocatorUPP = WSAllocatorProcPtr;
pub type WSDeallocatorProcPtr =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type MLDeallocatorUPP = WSDeallocatorProcPtr;
extern "C" {
    pub fn WSAllocatorCast(f: WSAllocatorProcPtr) -> __MLProcPtr__;
}
extern "C" {
    pub fn WSDeallocatorCast(f: WSDeallocatorProcPtr) -> __MLProcPtr__;
}
pub type WSAllocator = MLAllocatorUPP;
pub type WSAllocatorp = *mut WSAllocator;
pub type WSDeallocator = MLDeallocatorUPP;
pub type WSDeallocatorp = *mut WSDeallocator;
pub type _uint32_nt = ::std::os::raw::c_uint;
pub type _sint32_nt = ::std::os::raw::c_int;
pub type uchar_nt = ::std::os::raw::c_uchar;
pub type ucharp_nt = *mut uchar_nt;
pub type ucharpp_nt = *mut ucharp_nt;
pub type short_nt = ::std::os::raw::c_short;
pub type shortp_nt = *mut short_nt;
pub type shortpp_nt = *mut shortp_nt;
pub type int_nt = ::std::os::raw::c_int;
pub type intp_nt = *mut int_nt;
pub type intpp_nt = *mut intp_nt;
pub type long_nt = ::std::os::raw::c_long;
pub type longp_nt = *mut long_nt;
pub type longpp_nt = *mut longp_nt;
pub type int64_nt = wsint64;
pub type int64p_nt = *mut int64_nt;
pub type int64pp_nt = *mut int64p_nt;
pub type float_nt = f32;
pub type floatp_nt = *mut float_nt;
pub type floatpp_nt = *mut floatp_nt;
pub type double_nt = f64;
pub type doublep_nt = *mut double_nt;
pub type doublepp_nt = *mut doublep_nt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _i87extended_nt {
    pub w: [::std::os::raw::c_ushort; 5usize],
}
#[test]
fn bindgen_test_layout__i87extended_nt() {
    const UNINIT: ::std::mem::MaybeUninit<_i87extended_nt> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_i87extended_nt>(),
        10usize,
        concat!("Size of: ", stringify!(_i87extended_nt))
    );
    assert_eq!(
        ::std::mem::align_of::<_i87extended_nt>(),
        2usize,
        concat!("Alignment of ", stringify!(_i87extended_nt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_i87extended_nt),
            "::",
            stringify!(w)
        )
    );
}
pub type wsextended_double = u128;
pub type extended_nt = u128;
pub type extendedp_nt = *mut extended_nt;
pub type extendedpp_nt = *mut extendedp_nt;
pub type dev_world = *mut ::std::os::raw::c_void;
pub type dev_cookie = WSLINK;
pub type dev_worldp = *mut dev_world;
pub type dev_cookiep = *mut dev_cookie;
pub type dev_allocator = MLAllocatorUPP;
pub type dev_deallocator = MLDeallocatorUPP;
pub type world_main_type = dev_main_type;
pub type dev_mode = ::std::os::raw::c_ulong;
pub type dev_modep = *mut dev_mode;
pub type dev_options = ::std::os::raw::c_ulong;
pub type devyield_result = ::std::os::raw::c_long;
pub type devyield_place = ::std::os::raw::c_long;
pub type devyield_count = ::std::os::raw::c_long;
pub type devyield_sleep = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MLYieldParams {
    _unused: [u8; 0],
}
pub type WSYieldParameters = *mut MLYieldParams;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MLYieldData {
    pub private_data: [MLYieldData__bindgen_ty_1; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MLYieldData__bindgen_ty_1 {
    pub l: ::std::os::raw::c_long,
    pub d: f64,
    pub p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_MLYieldData__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MLYieldData__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MLYieldData__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(MLYieldData__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MLYieldData__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(MLYieldData__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MLYieldData__bindgen_ty_1),
            "::",
            stringify!(l)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MLYieldData__bindgen_ty_1),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MLYieldData__bindgen_ty_1),
            "::",
            stringify!(p)
        )
    );
}
#[test]
fn bindgen_test_layout_MLYieldData() {
    const UNINIT: ::std::mem::MaybeUninit<MLYieldData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MLYieldData>(),
        64usize,
        concat!("Size of: ", stringify!(MLYieldData))
    );
    assert_eq!(
        ::std::mem::align_of::<MLYieldData>(),
        8usize,
        concat!("Alignment of ", stringify!(MLYieldData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MLYieldData),
            "::",
            stringify!(private_data)
        )
    );
}
pub type MLYieldDataPointer = *mut MLYieldData;
extern "C" {
    pub fn MLNewYieldData(ydp: MLYieldDataPointer);
}
extern "C" {
    pub fn MLFreeYieldData(ydp: MLYieldDataPointer);
}
extern "C" {
    pub fn MLResetYieldData(
        ydp: MLYieldDataPointer,
        func_id: devyield_place,
    ) -> WSYieldParameters;
}
extern "C" {
    pub fn MLSetYieldParameter(
        yp: WSYieldParameters,
        selector: ::std::os::raw::c_ulong,
        data: *mut ::std::os::raw::c_void,
        len: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MLYieldParameter(
        yp: WSYieldParameters,
        selector: ::std::os::raw::c_ulong,
        data: *mut ::std::os::raw::c_void,
        len: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MLSetSleepYP(yp: WSYieldParameters, sleep: devyield_sleep) -> devyield_sleep;
}
extern "C" {
    pub fn MLSetCountYP(yp: WSYieldParameters, count: devyield_count) -> devyield_count;
}
pub const MLSleepParameter: _bindgen_ty_1 = 1;
pub const MLCountParameter: _bindgen_ty_1 = 2;
pub const MLPlaceParameter: _bindgen_ty_1 = 3;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type WSYielderProcPtr = ::std::option::Option<
    unsafe extern "C" fn(mlp: WSLINK, yp: WSYieldParameters) -> ::std::os::raw::c_int,
>;
pub type MLDeviceYielderProcPtr = WSYielderProcPtr;
pub type MLYielderUPP = WSYielderProcPtr;
pub type MLDeviceYielderUPP = WSYielderProcPtr;
pub type WSYieldFunctionType = MLYielderUPP;
pub type WSYieldFunctionObject = MLYielderUPP;
pub type dev_yielder = WSYieldFunctionObject;
pub type dev_yielderp = *mut dev_yielder;
pub type dev_message = ::std::os::raw::c_ulong;
pub type dev_messagep = *mut dev_message;
pub type WSHandlerProcPtr = ::std::option::Option<
    unsafe extern "C" fn(mlp: WSLINK, m: ::std::os::raw::c_int, n: ::std::os::raw::c_int),
>;
pub type MLDeviceHandlerProcPtr = WSHandlerProcPtr;
pub type MLHandlerUPP = WSHandlerProcPtr;
pub type MLDeviceHandlerUPP = WSHandlerProcPtr;
pub type WSMessageHandlerType = MLHandlerUPP;
pub type WSMessageHandlerObject = MLHandlerUPP;
pub type dev_msghandler = WSMessageHandlerObject;
pub type dev_msghandlerp = *mut dev_msghandler;
extern "C" {
    pub fn WSSleepYP(yp: WSYieldParameters) -> devyield_sleep;
}
extern "C" {
    pub fn WSCountYP(yp: WSYieldParameters) -> devyield_count;
}
extern "C" {
    pub fn WSCreateYieldFunction(
        ep: WSEnvironment,
        yf: WSYieldFunctionType,
        reserved: *mut ::std::os::raw::c_void,
    ) -> WSYieldFunctionObject;
}
extern "C" {
    pub fn WSDestroyYieldFunction(yfo: WSYieldFunctionObject) -> WSYieldFunctionType;
}
extern "C" {
    pub fn WSCallYieldFunction(
        yfo: WSYieldFunctionObject,
        mlp: WSLINK,
        p: WSYieldParameters,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSCreateMessageHandler(
        ep: WSEnvironment,
        mh: WSMessageHandlerType,
        reserved: *mut ::std::os::raw::c_void,
    ) -> WSMessageHandlerObject;
}
extern "C" {
    pub fn WSDestroyMessageHandler(mho: WSMessageHandlerObject) -> WSMessageHandlerType;
}
extern "C" {
    pub fn WSCallMessageHandler(
        mho: WSMessageHandlerObject,
        mlp: WSLINK,
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSYielderCast(yp: WSYielderProcPtr) -> __MLProcPtr__;
}
extern "C" {
    pub fn WSHandlerCast(mh: WSHandlerProcPtr) -> __MLProcPtr__;
}
pub type MLSigHandlerProcPtr =
    ::std::option::Option<unsafe extern "C" fn(signal: ::std::os::raw::c_int)>;
pub type WSSignalHandlerType = MLSigHandlerProcPtr;
pub type MLSignalHandlerObject = *mut ::std::os::raw::c_void;
pub type WSParametersPointer = *mut ::std::os::raw::c_char;
pub type MLParameters = [::std::os::raw::c_char; 356usize];
pub type WSUserProcPtr = ::std::option::Option<unsafe extern "C" fn(arg1: WSLINK)>;
pub type MLUserUPP = WSUserProcPtr;
pub type WSUserFunctionType = MLUserUPP;
pub type WSUserFunctionTypePointer = *mut WSUserFunctionType;
pub type WSUserFunction = MLUserUPP;
extern "C" {
    pub fn WSNewParameters(
        rev: ::std::os::raw::c_ulong,
        apirev: ::std::os::raw::c_ulong,
    ) -> WSEnvironmentParameter;
}
extern "C" {
    pub fn WSReleaseParameters(ep: WSEnvironmentParameter);
}
extern "C" {
    pub fn WSSetAllocParameter(
        ep: WSEnvironmentParameter,
        allocator: WSAllocator,
        deallocator: WSDeallocator,
    );
}
extern "C" {
    pub fn WSSetThreadSafeLinksParameter(
        ep: WSEnvironmentParameter,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSAllocParameter(
        ep: WSEnvironmentParameter,
        allocator: *mut WSAllocator,
        deallocator: *mut WSDeallocator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSSetResourceParameter(
        ep: WSEnvironmentParameter,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSSetDeviceParameter(
        ep: WSEnvironmentParameter,
        devspec: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSErrorParameter(ep: WSEnvironmentParameter) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSSetEncodingParameter(
        ep: WSEnvironmentParameter,
        etype: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSDoNotHandleSignalParameter(
        ep: WSEnvironmentParameter,
        signum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSStopHandlingSignal(env: WSEnvironment, signum: ::std::os::raw::c_int);
}
extern "C" {
    pub fn WSHandleSignal(env: WSEnvironment, signum: ::std::os::raw::c_int);
}
extern "C" {
    pub fn WSSetEnvironmentData(
        env: WSEnvironment,
        cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSEnvironmentData(env: WSEnvironment) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn WSSetSignalHandler(
        env: WSEnvironment,
        signum: ::std::os::raw::c_int,
        so: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSSetSignalHandlerFromFunction(
        env: WSEnvironment,
        signum: ::std::os::raw::c_int,
        sigfunc: WSSignalHandlerType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSUnsetSignalHandler(
        env: WSEnvironment,
        signum: ::std::os::raw::c_int,
        sigfunc: WSSignalHandlerType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSSetSymbolReplacement(
        mlp: WSLINK,
        priv_: *const ::std::os::raw::c_char,
        prlen: ::std::os::raw::c_int,
        pub_: *const ::std::os::raw::c_char,
        pblen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSClearSymbolReplacement(
        mlp: WSLINK,
        index: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSClearAllSymbolReplacements(mlp: WSLINK);
}
extern "C" {
    pub fn WSInitialize(ep: WSEnvironmentParameter) -> WSEnvironment;
}
extern "C" {
    pub fn WSDeinitialize(env: WSEnvironment);
}
extern "C" {
    pub fn WSVersionNumbers(
        env: WSEnvironment,
        inumb: *mut ::std::os::raw::c_int,
        rnumb: *mut ::std::os::raw::c_int,
        bnumb: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSCompilerID(
        env: WSEnvironment,
        id: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseCompilerID(env: WSEnvironment, id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn WSUCS2CompilerID(
        env: WSEnvironment,
        id: *mut *mut ::std::os::raw::c_ushort,
        length: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseUCS2CompilerID(
        env: WSEnvironment,
        id: *mut ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSUTF8CompilerID(
        env: WSEnvironment,
        id: *mut *mut ::std::os::raw::c_uchar,
        length: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseUTF8CompilerID(
        env: WSEnvironment,
        id: *mut ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSUTF16CompilerID(
        env: WSEnvironment,
        id: *mut *mut ::std::os::raw::c_ushort,
        length: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseUTF16CompilerID(
        env: WSEnvironment,
        id: *mut ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSUTF32CompilerID(
        env: WSEnvironment,
        id: *mut *mut ::std::os::raw::c_uint,
        length: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseUTF32CompilerID(
        env: WSEnvironment,
        id: *mut ::std::os::raw::c_uint,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSBegin(ep: WSEnvironmentParameter) -> WSEnvironment;
}
extern "C" {
    pub fn WSEnd(env: WSEnvironment);
}
extern "C" {
    pub fn WSSetEnvIDString(
        ep: WSEnvironment,
        environment_id: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetLinkedEnvIDString(
        mlp: WSLINK,
        environment_id: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseEnvIDString(
        mlp: WSLINK,
        environment_id: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn WSGetNetworkAddressList(
        ep: WSEnvironment,
        size: *mut ::std::os::raw::c_ulong,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSReleaseNetworkAddressList(
        ep: WSEnvironment,
        addresses: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn WSGetDomainNameList(
        ep: WSEnvironment,
        size: *mut ::std::os::raw::c_ulong,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSReleaseDomainNameList(
        ep: WSEnvironment,
        dnsnames: *mut *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn WSGetAvailableLinkProtocolNames(
        ep: WSEnvironment,
        protocolNames: *mut *mut *mut ::std::os::raw::c_char,
        length: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseLinkProtocolNames(
        ep: WSEnvironment,
        protocolNames: *mut *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSGetLinksFromEnvironment(
        ep: WSEnvironment,
        links: *mut *mut WSLINK,
        length: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseLinksFromEnvironment(
        ep: WSEnvironment,
        links: *mut WSLINK,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSNumericsQuery(
        ep: WSEnvironment,
        selector: ::std::os::raw::c_ulong,
        p1: *mut ::std::os::raw::c_void,
        p2: *mut ::std::os::raw::c_void,
        np: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSValid(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSFilterArgv(
        ep: WSEnvironment,
        argv: *mut *mut ::std::os::raw::c_char,
        argv_end: *mut *mut ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSFeatureString(
        mlp: WSLINK,
        buf: *mut ::std::os::raw::c_char,
        buffsize: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSOpenArgv(
        ep: WSEnvironment,
        argv: *mut *mut ::std::os::raw::c_char,
        argv_end: *mut *mut ::std::os::raw::c_char,
        errp: *mut ::std::os::raw::c_int,
    ) -> WSLINK;
}
extern "C" {
    pub fn WSOpenArgcArgv(
        ep: WSEnvironment,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        errp: *mut ::std::os::raw::c_int,
    ) -> WSLINK;
}
extern "C" {
    pub fn WSOpenString(
        ep: WSEnvironment,
        command_line: *const ::std::os::raw::c_char,
        errp: *mut ::std::os::raw::c_int,
    ) -> WSLINK;
}
extern "C" {
    pub fn WSLoopbackOpen(ep: WSEnvironment, errp: *mut ::std::os::raw::c_int) -> WSLINK;
}
extern "C" {
    pub fn WSStringToArgv(
        commandline: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        argv: *mut *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSScanString(
        argv: *mut *mut ::std::os::raw::c_char,
        argv_end: *mut *mut *mut ::std::os::raw::c_char,
        commandline: *mut *mut ::std::os::raw::c_char,
        buf: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSPrintArgv(
        buf: *mut ::std::os::raw::c_char,
        buf_endp: *mut *mut ::std::os::raw::c_char,
        argvp: *mut *mut *mut ::std::os::raw::c_char,
        argv_end: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSErrorMessage(mlp: WSLINK) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSErrorString(
        env: WSEnvironment,
        err: ::std::os::raw::c_long,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSUCS2ErrorMessage(
        mlp: WSLINK,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn WSUTF8ErrorMessage(
        mlp: WSLINK,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn WSUTF16ErrorMessage(
        mlp: WSLINK,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn WSUTF32ErrorMessage(
        mlp: WSLINK,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uint;
}
extern "C" {
    pub fn WSReleaseErrorMessage(mlp: WSLINK, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn WSReleaseUCS2ErrorMessage(
        mlp: WSLINK,
        message: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF8ErrorMessage(
        mlp: WSLINK,
        message: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF16ErrorMessage(
        mlp: WSLINK,
        message: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF32ErrorMessage(
        mlp: WSLINK,
        message: *const ::std::os::raw::c_uint,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSOpen(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> WSLINK;
}
extern "C" {
    pub fn WSOpenInEnv(
        env: WSEnvironment,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        errp: *mut ::std::os::raw::c_int,
    ) -> WSLINK;
}
extern "C" {
    pub fn WSDuplicateLink(
        parentmlp: WSLINK,
        name: *const ::std::os::raw::c_char,
        errp: *mut ::std::os::raw::c_int,
    ) -> WSLINK;
}
extern "C" {
    pub fn WSConnect(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSActivate(mlp: WSLINK) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct feature_set {
    _unused: [u8; 0],
}
pub type feature_setp = *mut feature_set;
extern "C" {
    pub fn WSEstablish(mlp: WSLINK, features: feature_setp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSEstablishString(
        mlp: WSLINK,
        features: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSClose(mlp: WSLINK);
}
extern "C" {
    pub fn WSSetUserData(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_void,
        f: WSUserFunction,
    );
}
extern "C" {
    pub fn WSUserData(
        mlp: WSLINK,
        fp: *mut WSUserFunctionType,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn WSSetUserBlock(mlp: WSLINK, userblock: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn WSUserBlock(mlp: WSLINK) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn WSUserCast(f: WSUserProcPtr) -> __MLProcPtr__;
}
extern "C" {
    pub fn WSLogStreamToFile(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSDisableLoggingStream(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSEnableLoggingStream(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSStopLoggingStreamToFile(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSStopLoggingStream(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSLogFileNameForLink(
        mlp: WSLINK,
        name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseLogFileNameForLink(mlp: WSLINK, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn WSName(mlp: WSLINK) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSLinkName(mlp: WSLINK) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSUCS2LinkName(
        mlp: WSLINK,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn WSUTF8LinkName(
        mlp: WSLINK,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn WSUTF16LinkName(
        mlp: WSLINK,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn WSUTF32LinkName(
        mlp: WSLINK,
        length: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uint;
}
extern "C" {
    pub fn WSReleaseLinkName(mlp: WSLINK, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn WSReleaseUCS2LinkName(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF8LinkName(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF16LinkName(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF32LinkName(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_uint,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSNumber(mlp: WSLINK) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSToLinkID(mlp: WSLINK) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSFromLinkID(ep: WSEnvironment, n: ::std::os::raw::c_long) -> WSLINK;
}
extern "C" {
    pub fn WSSetName(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSInit(
        alloc: WSAllocator,
        dealloc: WSDeallocator,
        enclosing_environment: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn WSDeinit(env: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn WSEnclosingEnvironment(
        ep: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn WLinkEnvironment(mlp: WSLINK) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn WSEnableLinkLock(mlp: WSLINK);
}
extern "C" {
    pub fn WSDisableLinkLock(mlp: WSLINK);
}
extern "C" {
    pub fn WSLinkEnvironment(mlp: WSLINK) -> WSEnvironment;
}
extern "C" {
    pub fn WSIsLinkLoopback(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSDefaultYieldFunction(env: WSEnvironment) -> WSYieldFunctionObject;
}
extern "C" {
    pub fn WSSetDefaultYieldFunction(
        env: WSEnvironment,
        yf: WSYieldFunctionObject,
    ) -> ::std::os::raw::c_int;
}
pub type WSLinkServer = *mut ::std::os::raw::c_void;
pub type WSNewLinkCallbackFunction =
    ::std::option::Option<unsafe extern "C" fn(server: WSLinkServer, link: WSLINK)>;
extern "C" {
    pub fn WSNewLinkServer(
        env: WSEnvironment,
        context: *mut ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
    ) -> WSLinkServer;
}
extern "C" {
    pub fn WSNewLinkServerWithPort(
        env: WSEnvironment,
        port: ::std::os::raw::c_ushort,
        context: *mut ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
    ) -> WSLinkServer;
}
extern "C" {
    pub fn WSNewLinkServerWithPortAndInterface(
        env: WSEnvironment,
        port: ::std::os::raw::c_ushort,
        iface: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
        error: *mut ::std::os::raw::c_int,
    ) -> WSLinkServer;
}
extern "C" {
    pub fn WSShutdownLinkServer(server: WSLinkServer);
}
extern "C" {
    pub fn WSRegisterCallbackFunctionWithLinkServer(
        server: WSLinkServer,
        function: WSNewLinkCallbackFunction,
    );
}
extern "C" {
    pub fn WSWaitForNewLinkFromLinkServer(
        server: WSLinkServer,
        error: *mut ::std::os::raw::c_int,
    ) -> WSLINK;
}
extern "C" {
    pub fn WSPortFromLinkServer(
        server: WSLinkServer,
        error: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn WSInterfaceFromLinkServer(
        server: WSLinkServer,
        error: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSContextFromLinkServer(
        server: WSLinkServer,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn WSReleaseInterfaceFromLinkServer(
        server: WSLinkServer,
        iface: *const ::std::os::raw::c_char,
    );
}
pub type WSServiceRef = *mut ::std::os::raw::c_void;
pub type MLBrowseCallbackFunction = ::std::option::Option<
    unsafe extern "C" fn(
        env: WSEnvironment,
        ref_: WSServiceRef,
        flag: ::std::os::raw::c_int,
        serviceName: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn WSBrowseForLinkServices(
        env: WSEnvironment,
        callbackFunction: MLBrowseCallbackFunction,
        serviceProtocol: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
        ref_: *mut WSServiceRef,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSStopBrowsingForLinkServices(env: WSEnvironment, ref_: WSServiceRef);
}
pub type MLResolveCallbackFunction = ::std::option::Option<
    unsafe extern "C" fn(
        env: WSEnvironment,
        ref_: WSServiceRef,
        serviceName: *const ::std::os::raw::c_char,
        linkName: *const ::std::os::raw::c_char,
        protocol: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn WSResolveLinkService(
        env: WSEnvironment,
        arg1: MLResolveCallbackFunction,
        serviceProtocol: *const ::std::os::raw::c_char,
        serviceName: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
        ref_: *mut WSServiceRef,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSStopResolvingLinkService(env: WSEnvironment, ref_: WSServiceRef);
}
pub type MLRegisterCallbackFunction = ::std::option::Option<
    unsafe extern "C" fn(
        env: WSEnvironment,
        ref_: WSServiceRef,
        flag: ::std::os::raw::c_int,
        serviceName: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn WSRegisterLinkServiceWithPortAndHostname(
        env: WSEnvironment,
        serviceProtocol: *const ::std::os::raw::c_char,
        serviceName: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_ushort,
        hostname: *const ::std::os::raw::c_char,
        function: MLRegisterCallbackFunction,
        domain: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
        ref_: *mut WSServiceRef,
        error: *mut ::std::os::raw::c_int,
    ) -> WSLINK;
}
extern "C" {
    pub fn WSRegisterLinkServiceWithHostname(
        env: WSEnvironment,
        serviceProtocol: *const ::std::os::raw::c_char,
        serviceName: *const ::std::os::raw::c_char,
        hostname: *const ::std::os::raw::c_char,
        function: MLRegisterCallbackFunction,
        domain: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
        ref_: *mut WSServiceRef,
        error: *mut ::std::os::raw::c_int,
    ) -> WSLINK;
}
extern "C" {
    pub fn WSRegisterLinkService(
        env: WSEnvironment,
        serviceProtocol: *const ::std::os::raw::c_char,
        serviceName: *const ::std::os::raw::c_char,
        function: MLRegisterCallbackFunction,
        domain: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
        arg1: *mut WSServiceRef,
        error: *mut ::std::os::raw::c_int,
    ) -> WSLINK;
}
extern "C" {
    pub fn MLRegisterLinkServiceUsingLinkProtocol(
        env: WSEnvironment,
        serviceProtocol: *const ::std::os::raw::c_char,
        serviceName: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_ushort,
        hostname: *const ::std::os::raw::c_char,
        protocol: *const ::std::os::raw::c_char,
        function: MLRegisterCallbackFunction,
        domain: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
        ref_: *mut WSServiceRef,
        error: *mut ::std::os::raw::c_int,
    ) -> WSLINK;
}
extern "C" {
    pub fn WSRegisterLinkServiceFromLinkServer(
        env: WSEnvironment,
        serviceProtocol: *const ::std::os::raw::c_char,
        serviceName: *const ::std::os::raw::c_char,
        server: WSLinkServer,
        function: MLRegisterCallbackFunction,
        domain: *const ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_void,
        ref_: *mut WSServiceRef,
        error: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSStopRegisteringLinkService(env: WSEnvironment, ref_: WSServiceRef);
}
extern "C" {
    pub fn WSStopRegisteringLinkServiceForLink(
        env: WSEnvironment,
        link: WSLINK,
        ref_: WSServiceRef,
    );
}
extern "C" {
    pub fn WSServiceProtocolFromReference(
        env: WSEnvironment,
        ref_: WSServiceRef,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSError(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSClearError(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSSetError(mlp: WSLINK, err: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const WSTerminateMessage: _bindgen_ty_2 = 1;
pub const WSInterruptMessage: _bindgen_ty_2 = 2;
pub const WSAbortMessage: _bindgen_ty_2 = 3;
pub const WSEndPacketMessage: _bindgen_ty_2 = 4;
pub const WSSynchronizeMessage: _bindgen_ty_2 = 5;
pub const WSImDyingMessage: _bindgen_ty_2 = 6;
pub const WSWaitingAcknowledgment: _bindgen_ty_2 = 7;
pub const WSMarkTopLevelMessage: _bindgen_ty_2 = 8;
pub const WSLinkClosingMessage: _bindgen_ty_2 = 9;
pub const WSAuthenticateFailure: _bindgen_ty_2 = 10;
pub const WSSuspendActivitiesMessage: _bindgen_ty_2 = 11;
pub const WSResumeActivitiesMessage: _bindgen_ty_2 = 12;
pub const WSFirstUserMessage: _bindgen_ty_2 = 128;
pub const WSLastUserMessage: _bindgen_ty_2 = 255;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub type devinfo_selector = ::std::os::raw::c_ulong;
extern "C" {
    pub fn WSPutMessage(mlp: WSLINK, msg: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetMessage(
        mlp: WSLINK,
        mp: *mut ::std::os::raw::c_int,
        np: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSMessageReady(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutMessageWithArg(
        mlp: WSLINK,
        msg: ::std::os::raw::c_int,
        arg: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetMessageHandler(mlp: WSLINK) -> WSMessageHandlerObject;
}
extern "C" {
    pub fn WSMessageHandler(mlp: WSLINK) -> WSMessageHandlerObject;
}
extern "C" {
    pub fn WSGetYieldFunction(mlp: WSLINK) -> WSYieldFunctionObject;
}
extern "C" {
    pub fn WSYieldFunction(mlp: WSLINK) -> WSYieldFunctionObject;
}
extern "C" {
    pub fn WSSetMessageHandler(
        mlp: WSLINK,
        h: WSMessageHandlerObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSSetYieldFunction(
        mlp: WSLINK,
        yf: WSYieldFunctionObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSDeviceInformation(
        mlp: WSLINK,
        selector: devinfo_selector,
        buf: *mut ::std::os::raw::c_void,
        buflen: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSLowLevelDeviceName(
        mlp: WSLINK,
        name: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseLowLevelDeviceName(mlp: WSLINK, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn WSGetNext(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetNextRaw(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetType(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetRawType(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetRawData(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
        gotp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetData(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        gotp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetArgCount(
        mlp: WSLINK,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetRawArgCount(
        mlp: WSLINK,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSBytesToGet(
        mlp: WSLINK,
        leftp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSRawBytesToGet(
        mlp: WSLINK,
        leftp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSExpressionsToGet(
        mlp: WSLINK,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSNewPacket(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTakeLast(mlp: WSLINK, eleft: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSFill(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutNext(mlp: WSLINK, tok: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutType(mlp: WSLINK, tok: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutRawSize(
        mlp: WSLINK,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutRawData(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutArgCount(
        mlp: WSLINK,
        argc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutComposite(
        mlp: WSLINK,
        argc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSBytesToPut(
        mlp: WSLINK,
        leftp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSEndPacket(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSFlush(mlp: WSLINK) -> ::std::os::raw::c_int;
}
pub type decoder_mask = ::std::os::raw::c_ulong;
extern "C" {
    pub fn WSGetBinaryNumber(
        mlp: WSLINK,
        np: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetShortInteger(
        mlp: WSLINK,
        hp: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger(
        mlp: WSLINK,
        ip: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetLongInteger(
        mlp: WSLINK,
        lp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger16(
        mlp: WSLINK,
        hp: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger32(
        mlp: WSLINK,
        ip: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger64(mlp: WSLINK, wp: *mut wsint64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger8(
        mlp: WSLINK,
        cp: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetFloat(mlp: WSLINK, fp: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetDouble(mlp: WSLINK, dp: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal(mlp: WSLINK, dp: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetLongDouble(
        mlp: WSLINK,
        xp: *mut wsextended_double,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal32(mlp: WSLINK, fp: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal64(mlp: WSLINK, dp: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal128(mlp: WSLINK, dp: *mut wsextended_double)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGet8BitCharacters(
        mlp: WSLINK,
        chars_left: *mut ::std::os::raw::c_long,
        buf: *mut ::std::os::raw::c_uchar,
        cardof_buf: ::std::os::raw::c_long,
        got: *mut ::std::os::raw::c_long,
        missing: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGet7BitCharacters(
        mlp: WSLINK,
        chars_left: *mut ::std::os::raw::c_long,
        buf: *mut ::std::os::raw::c_char,
        cardof_buf: ::std::os::raw::c_long,
        got: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUCS2Characters(
        mlp: WSLINK,
        chars_left: *mut ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_ushort,
        cardof_buf: ::std::os::raw::c_int,
        got: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF8Characters(
        mlp: WSLINK,
        chars_left: *mut ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uchar,
        cardof_buf: ::std::os::raw::c_int,
        got: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF16Characters(
        mlp: WSLINK,
        chars_left: *mut ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_ushort,
        cardof_buf: ::std::os::raw::c_int,
        got: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF32Characters(
        mlp: WSLINK,
        chars_left: *mut ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_uint,
        cardof_buf: ::std::os::raw::c_int,
        got: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetByteString(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uchar,
        lenp: *mut ::std::os::raw::c_int,
        missing: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetString(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUCS2String(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_ushort,
        lenp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF8String(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uchar,
        bytes: *mut ::std::os::raw::c_int,
        chars: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF16String(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_ushort,
        ncodes: *mut ::std::os::raw::c_int,
        chars: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF32String(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uint,
        len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetNumberAsByteString(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uchar,
        lenp: *mut ::std::os::raw::c_long,
        missing: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetNumberAsString(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetNumberAsUCS2String(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_ushort,
        lenp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetNumberAsUTF8String(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uchar,
        bytes: *mut ::std::os::raw::c_int,
        chars: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetNumberAsUTF16String(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_ushort,
        ncodes: *mut ::std::os::raw::c_int,
        chars: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetNumberAsUTF32String(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uint,
        lenp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseUCS2String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF8String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF16String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF32String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uint,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseByteString(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseString(mlp: WSLINK, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn WSTestString(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUCS2String(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF8String(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF16String(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF32String(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_uint,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetByteSymbol(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uchar,
        lenp: *mut ::std::os::raw::c_int,
        missing: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetSymbol(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUCS2Symbol(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_ushort,
        lenp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF8Symbol(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uchar,
        bytes: *mut ::std::os::raw::c_int,
        chars: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF16Symbol(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_ushort,
        ncodes: *mut ::std::os::raw::c_int,
        chars: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF32Symbol(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uint,
        lenp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseUCS2Symbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF8Symbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF16Symbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseUTF32Symbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uint,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseByteSymbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseSymbol(mlp: WSLINK, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn WSTestSymbol(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUCS2Symbol(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF8Symbol(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF16Symbol(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF32Symbol(
        mlp: WSLINK,
        name: *const ::std::os::raw::c_uint,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetFunction(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_char,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUCS2Function(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_ushort,
        length: *mut ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF8Function(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uchar,
        length: *mut ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF16Function(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_ushort,
        length: *mut ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetUTF32Function(
        mlp: WSLINK,
        sp: *mut *const ::std::os::raw::c_uint,
        length: *mut ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSCheckFunction(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_char,
        countp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSCheckFunctionWithArgCount(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_char,
        countp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestHead(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_char,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestHeadWithArgCount(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_char,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUCS2HeadWithArgCount(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF16HeadWithArgCount(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF32HeadWithArgCount(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uint,
        length: ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF8HeadWithArgCount(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUCS2Head(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF8Head(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF16Head(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTestUTF32Head(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uint,
        length: ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutBinaryNumber(
        mlp: WSLINK,
        np: *mut ::std::os::raw::c_void,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutShortInteger(
        mlp: WSLINK,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger(mlp: WSLINK, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutLongInteger(
        mlp: WSLINK,
        l: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger16(mlp: WSLINK, h: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger32(mlp: WSLINK, i: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger64(mlp: WSLINK, w: wsint64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger8(
        mlp: WSLINK,
        i: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutFloat(mlp: WSLINK, f: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutDouble(mlp: WSLINK, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal(mlp: WSLINK, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutLongDouble(mlp: WSLINK, x: wsextended_double) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal32(mlp: WSLINK, f: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal64(mlp: WSLINK, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal128(mlp: WSLINK, x: wsextended_double) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPut8BitCharacters(
        mlp: WSLINK,
        chars_left: ::std::os::raw::c_long,
        bytes: *const ::std::os::raw::c_uchar,
        nbytes: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPut7BitCount(
        mlp: WSLINK,
        count: ::std::os::raw::c_long,
        size: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPut7BitCharacters(
        mlp: WSLINK,
        chars_left: ::std::os::raw::c_long,
        bytes: *const ::std::os::raw::c_char,
        nbytes: ::std::os::raw::c_long,
        nchars_now: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUCS2Characters(
        mlp: WSLINK,
        chars_left: ::std::os::raw::c_int,
        codes: *const ::std::os::raw::c_ushort,
        ncodes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF8Characters(
        mlp: WSLINK,
        chars_left: ::std::os::raw::c_int,
        codes: *const ::std::os::raw::c_uchar,
        ncodes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF16Characters(
        mlp: WSLINK,
        chars_left: ::std::os::raw::c_int,
        codes: *const ::std::os::raw::c_ushort,
        ncodes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF32Characters(
        mlp: WSLINK,
        chars_left: ::std::os::raw::c_int,
        codes: *const ::std::os::raw::c_uint,
        ncodes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutByteString(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutString(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUCS2String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF8String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF16String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF32String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uint,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutRealNumberAsString(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutRealNumberAsByteString(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutRealNumberAsUCS2String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutRealNumberAsUTF8String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        nbytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutRealNumberAsUTF16String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        ncodes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutRealNumberAsUTF32String(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uint,
        nchars: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutSize(mlp: WSLINK, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutData(
        mlp: WSLINK,
        buff: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutByteSymbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutSymbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUCS2Symbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF8Symbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF16Symbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF32Symbol(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uint,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutFunction(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUCS2Function(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
        argn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF8Function(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
        argn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF16Function(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_ushort,
        length: ::std::os::raw::c_int,
        argn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutUTF32Function(
        mlp: WSLINK,
        s: *const ::std::os::raw::c_uint,
        length: ::std::os::raw::c_int,
        argn: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WSStringPosition {
    pub str_: *const ::std::os::raw::c_char,
    pub end: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WSStringPosition() {
    const UNINIT: ::std::mem::MaybeUninit<WSStringPosition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WSStringPosition>(),
        16usize,
        concat!("Size of: ", stringify!(WSStringPosition))
    );
    assert_eq!(
        ::std::mem::align_of::<WSStringPosition>(),
        8usize,
        concat!("Alignment of ", stringify!(WSStringPosition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WSStringPosition),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WSStringPosition),
            "::",
            stringify!(end)
        )
    );
}
pub type WSStringPositionPointer = *mut WSStringPosition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WSOldStringPosition {
    pub cc: *mut ::std::os::raw::c_uchar,
    pub mode: ::std::os::raw::c_int,
    pub more: ::std::os::raw::c_int,
    pub head: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_WSOldStringPosition() {
    const UNINIT: ::std::mem::MaybeUninit<WSOldStringPosition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WSOldStringPosition>(),
        24usize,
        concat!("Size of: ", stringify!(WSOldStringPosition))
    );
    assert_eq!(
        ::std::mem::align_of::<WSOldStringPosition>(),
        8usize,
        concat!("Alignment of ", stringify!(WSOldStringPosition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WSOldStringPosition),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WSOldStringPosition),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).more) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WSOldStringPosition),
            "::",
            stringify!(more)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WSOldStringPosition),
            "::",
            stringify!(head)
        )
    );
}
pub type WSOldStringPositionPointer = *mut WSOldStringPosition;
extern "C" {
    pub fn WSCharacterOffset(
        startp: *mut *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSStringCharacter(
        start: *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSNextCharacter(
        startp: *mut *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSNextCharacterFromStringWithLength(
        str_: *const ::std::os::raw::c_char,
        indexp: *mut ::std::os::raw::c_long,
        len: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertNewLine(
        sp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertCharacter(
        ch: ::std::os::raw::c_ulong,
        sp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertByteString(
        codes: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertByteStringNL(
        codes: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
        nl: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertDoubleByteString(
        codes: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertDoubleByteStringNL(
        codes: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
        nl: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertUCS2String(
        codes: *mut ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertUCS2StringNL(
        codes: *mut ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
        nl: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertUTF8String(
        codes: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertUTF8StringNL(
        codes: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
        nl: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertUTF16String(
        codes: *mut ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertUTF16StringNL(
        codes: *mut ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
        nl: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertUTF32String(
        codes: *mut ::std::os::raw::c_uint,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSConvertUTF32StringNL(
        codes: *mut ::std::os::raw::c_uint,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
        nl: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSStringFirstPosFun(
        s: *const ::std::os::raw::c_char,
        p: WSStringPositionPointer,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WSOldPutCharToString(
        ch: ::std::os::raw::c_uint,
        sp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSOldStringNextPosFun(
        p: WSOldStringPositionPointer,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn WSOldStringFirstPosFun(
        s: *mut ::std::os::raw::c_char,
        p: WSOldStringPositionPointer,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn WSOldStringCharFun(p: WSOldStringPositionPointer) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn WSOldConvertByteString(
        codes: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSOldConvertUCS2String(
        codes: *mut ::std::os::raw::c_ushort,
        len: ::std::os::raw::c_long,
        strp: *mut *mut ::std::os::raw::c_char,
        str_end: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSCharOffset(
        startp: *mut *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_long,
        more: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn WSNextChar(
        startp: *mut *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
        more: ::std::os::raw::c_int,
        useSurrogates: ::std::os::raw::c_int,
        wasSurrogatePair: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct array_meter {
    _unused: [u8; 0],
}
pub type array_meterp = *mut array_meter;
pub type array_meterpp = *mut array_meterp;
extern "C" {
    pub fn WSPutArray(mlp: WSLINK, meterp: array_meterp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutBinaryNumberArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutByteArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutShortIntegerArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const ::std::os::raw::c_short,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutIntegerArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutLongIntegerArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const ::std::os::raw::c_long,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger8ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger16ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const ::std::os::raw::c_short,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger32ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger64ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const wsint64,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutFloatArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const f32,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutDoubleArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const f64,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutLongDoubleArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const wsextended_double,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal32ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const f32,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal64ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const f64,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal128ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *const wsextended_double,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutBinaryNumberArray(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_void,
        dimp: *const ::std::os::raw::c_long,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutByteArray(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_uchar,
        dims: *const ::std::os::raw::c_int,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutShortIntegerArray(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_short,
        dims: *const ::std::os::raw::c_long,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutIntegerArray(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_long,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutLongIntegerArray(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_long,
        dims: *const ::std::os::raw::c_long,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger8Array(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_uchar,
        dims: *const ::std::os::raw::c_int,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger16Array(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_short,
        dims: *const ::std::os::raw::c_int,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger32Array(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_int,
        dims: *const ::std::os::raw::c_int,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger64Array(
        mlp: WSLINK,
        data: *const wsint64,
        dims: *const ::std::os::raw::c_int,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutFloatArray(
        mlp: WSLINK,
        data: *const f32,
        dims: *const ::std::os::raw::c_long,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutDoubleArray(
        mlp: WSLINK,
        data: *const f64,
        dims: *const ::std::os::raw::c_long,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutRealArray(
        mlp: WSLINK,
        data: *const f64,
        dims: *const ::std::os::raw::c_long,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutLongDoubleArray(
        mlp: WSLINK,
        data: *const wsextended_double,
        dims: *const ::std::os::raw::c_long,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal32Array(
        mlp: WSLINK,
        data: *const f32,
        dims: *const ::std::os::raw::c_int,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal64Array(
        mlp: WSLINK,
        data: *const f64,
        dims: *const ::std::os::raw::c_int,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal128Array(
        mlp: WSLINK,
        data: *const wsextended_double,
        dims: *const ::std::os::raw::c_int,
        heads: *mut *const ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutBinaryNumberList(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutIntegerList(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutRealList(
        mlp: WSLINK,
        data: *const f64,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger8List(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger16List(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_short,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger32List(
        mlp: WSLINK,
        data: *const ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutInteger64List(
        mlp: WSLINK,
        data: *const wsint64,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal32List(
        mlp: WSLINK,
        data: *const f32,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal64List(
        mlp: WSLINK,
        data: *const f64,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutReal128List(
        mlp: WSLINK,
        data: *const wsextended_double,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutArrayType(
        mlp: WSLINK,
        heads: WSLINK,
        depth: ::std::os::raw::c_long,
        meterpp: array_meterpp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleasePutArrayState(
        mlp: WSLINK,
        heads: WSLINK,
        meterp: array_meterp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutArrayLeaves(
        mlp: WSLINK,
        heads: WSLINK,
        meterp: array_meterp,
        leaves: WSLINK,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSPutBinaryNumberArrayDataWithHeads(
        mlp: WSLINK,
        heads: WSLINK,
        meterp: array_meterp,
        datap: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetArrayDimensions(
        mlp: WSLINK,
        meterp: array_meterp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetArrayType(mlp: WSLINK, meterp: array_meterp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetBinaryNumberList(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_void,
        countp: *mut ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetIntegerList(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetRealList(
        mlp: WSLINK,
        datap: *mut *mut f64,
        countp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger16List(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_short,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger32List(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_int,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger64List(
        mlp: WSLINK,
        datap: *mut *mut wsint64,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal32List(
        mlp: WSLINK,
        datap: *mut *mut f32,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal64List(
        mlp: WSLINK,
        datap: *mut *mut f64,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal128List(
        mlp: WSLINK,
        datap: *mut *mut wsextended_double,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseIntegerList(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn WSReleaseRealList(mlp: WSLINK, data: *mut f64, count: ::std::os::raw::c_long);
}
extern "C" {
    pub fn WSReleaseBinaryNumberList(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn WSReleaseInteger16List(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_short,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseInteger32List(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseInteger64List(
        mlp: WSLINK,
        data: *mut wsint64,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseReal32List(mlp: WSLINK, data: *mut f32, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn WSReleaseReal64List(mlp: WSLINK, data: *mut f64, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn WSReleaseReal128List(
        mlp: WSLINK,
        data: *mut wsextended_double,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSGetBinaryNumberArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetByteArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetShortIntegerArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut ::std::os::raw::c_short,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetIntegerArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut ::std::os::raw::c_int,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetLongIntegerArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut ::std::os::raw::c_long,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger16ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut ::std::os::raw::c_short,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger32ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger64ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut wsint64,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetFloatArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut f32,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetDoubleArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut f64,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetLongDoubleArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut wsextended_double,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal32ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut f32,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal64ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut f64,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal128ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut wsextended_double,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger8List(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_uchar,
        countp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger8ArrayData(
        mlp: WSLINK,
        meterp: array_meterp,
        datap: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseInteger8List(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSGetArrayTypeWithDepthAndLeafType(
        mlp: WSLINK,
        heads: WSLINK,
        meterpp: array_meterpp,
        depthp: *mut ::std::os::raw::c_long,
        leaf_tokp: *mut mlapi__token,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetBinaryNumberArrayDataWithHeads(
        mlp: WSLINK,
        heads: WSLINK,
        meterp: array_meterp,
        datap: *mut ::std::os::raw::c_void,
        countp: *mut ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseGetArrayState(mlp: WSLINK, heads: WSLINK, meterp: array_meterp);
}
extern "C" {
    pub fn WSGetBinaryNumberArrayWithLeafType(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_void,
        dimpp: *mut *mut ::std::os::raw::c_long,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
        leaf_tokp: *mut mlapi__token,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetBinaryNumberArray(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_void,
        dimpp: *mut *mut ::std::os::raw::c_long,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_long,
        type_: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetByteArray(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_uchar,
        dimsp: *mut *mut ::std::os::raw::c_int,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetShortIntegerArray(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_short,
        dimsp: *mut *mut ::std::os::raw::c_long,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetIntegerArray(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_int,
        dimsp: *mut *mut ::std::os::raw::c_long,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetLongIntegerArray(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_long,
        dimsp: *mut *mut ::std::os::raw::c_long,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger16Array(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_short,
        dimsp: *mut *mut ::std::os::raw::c_int,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger32Array(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_int,
        dimsp: *mut *mut ::std::os::raw::c_int,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger64Array(
        mlp: WSLINK,
        datap: *mut *mut wsint64,
        dimsp: *mut *mut ::std::os::raw::c_int,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetInteger8Array(
        mlp: WSLINK,
        datap: *mut *mut ::std::os::raw::c_uchar,
        dimsp: *mut *mut ::std::os::raw::c_int,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetFloatArray(
        mlp: WSLINK,
        datap: *mut *mut f32,
        dimsp: *mut *mut ::std::os::raw::c_long,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetDoubleArray(
        mlp: WSLINK,
        datap: *mut *mut f64,
        dimsp: *mut *mut ::std::os::raw::c_long,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetRealArray(
        mlp: WSLINK,
        datap: *mut *mut f64,
        dimsp: *mut *mut ::std::os::raw::c_long,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetLongDoubleArray(
        mlp: WSLINK,
        datap: *mut *mut wsextended_double,
        dimsp: *mut *mut ::std::os::raw::c_long,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal32Array(
        mlp: WSLINK,
        datap: *mut *mut f32,
        dimsp: *mut *mut ::std::os::raw::c_int,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal64Array(
        mlp: WSLINK,
        datap: *mut *mut f64,
        dimsp: *mut *mut ::std::os::raw::c_int,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSGetReal128Array(
        mlp: WSLINK,
        datap: *mut *mut wsextended_double,
        dimsp: *mut *mut ::std::os::raw::c_int,
        headsp: *mut *mut *mut ::std::os::raw::c_char,
        depthp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSReleaseShortIntegerArray(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_short,
        dims: *mut ::std::os::raw::c_long,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn WSReleaseIntegerArray(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_long,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn WSReleaseLongIntegerArray(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_long,
        dims: *mut ::std::os::raw::c_long,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn WSReleaseBinaryNumberArray(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_void,
        dimp: *mut ::std::os::raw::c_int,
        heads: *mut *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn WSReleaseByteArray(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_uchar,
        dims: *mut ::std::os::raw::c_int,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseInteger16Array(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_short,
        dims: *mut ::std::os::raw::c_int,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseInteger32Array(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_int,
        dims: *mut ::std::os::raw::c_int,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseInteger64Array(
        mlp: WSLINK,
        data: *mut wsint64,
        dims: *mut ::std::os::raw::c_int,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseInteger8Array(
        mlp: WSLINK,
        data: *mut ::std::os::raw::c_uchar,
        dimp: *mut ::std::os::raw::c_int,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseFloatArray(
        mlp: WSLINK,
        data: *mut f32,
        dims: *mut ::std::os::raw::c_long,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn WSReleaseDoubleArray(
        mlp: WSLINK,
        data: *mut f64,
        dims: *mut ::std::os::raw::c_long,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn WSReleaseRealArray(
        mlp: WSLINK,
        data: *mut f64,
        dims: *mut ::std::os::raw::c_long,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn WSReleaseReal32Array(
        mlp: WSLINK,
        data: *mut f32,
        dims: *mut ::std::os::raw::c_int,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseReal64Array(
        mlp: WSLINK,
        data: *mut f64,
        dims: *mut ::std::os::raw::c_int,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseReal128Array(
        mlp: WSLINK,
        data: *mut wsextended_double,
        dims: *mut ::std::os::raw::c_int,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSReleaseLongDoubleArray(
        mlp: WSLINK,
        data: *mut wsextended_double,
        dims: *mut ::std::os::raw::c_long,
        heads: *mut *mut ::std::os::raw::c_char,
        depth: ::std::os::raw::c_long,
    );
}
pub const WSUnicodeContainerType_UCS2ContainerType: WSUnicodeContainerType = 0;
pub const WSUnicodeContainerType_UTF8ContainerType: WSUnicodeContainerType = 1;
pub const WSUnicodeContainerType_UTF16ContainerType: WSUnicodeContainerType = 2;
pub const WSUnicodeContainerType_UTF32ContainerType: WSUnicodeContainerType = 3;
pub type WSUnicodeContainerType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MLUnicodeContainer {
    pub pointer: _MLUnicodeContainer__pointer,
    pub length: ::std::os::raw::c_int,
    pub type_: WSUnicodeContainerType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _MLUnicodeContainer__pointer {
    pub ucs2: *mut ::std::os::raw::c_ushort,
    pub utf8: *mut ::std::os::raw::c_uchar,
    pub utf16: *mut ::std::os::raw::c_ushort,
    pub utf32: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__MLUnicodeContainer__pointer() {
    const UNINIT: ::std::mem::MaybeUninit<_MLUnicodeContainer__pointer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_MLUnicodeContainer__pointer>(),
        8usize,
        concat!("Size of: ", stringify!(_MLUnicodeContainer__pointer))
    );
    assert_eq!(
        ::std::mem::align_of::<_MLUnicodeContainer__pointer>(),
        8usize,
        concat!("Alignment of ", stringify!(_MLUnicodeContainer__pointer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ucs2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MLUnicodeContainer__pointer),
            "::",
            stringify!(ucs2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).utf8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MLUnicodeContainer__pointer),
            "::",
            stringify!(utf8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).utf16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MLUnicodeContainer__pointer),
            "::",
            stringify!(utf16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).utf32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MLUnicodeContainer__pointer),
            "::",
            stringify!(utf32)
        )
    );
}
#[test]
fn bindgen_test_layout__MLUnicodeContainer() {
    const UNINIT: ::std::mem::MaybeUninit<_MLUnicodeContainer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_MLUnicodeContainer>(),
        16usize,
        concat!("Size of: ", stringify!(_MLUnicodeContainer))
    );
    assert_eq!(
        ::std::mem::align_of::<_MLUnicodeContainer>(),
        8usize,
        concat!("Alignment of ", stringify!(_MLUnicodeContainer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MLUnicodeContainer),
            "::",
            stringify!(pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MLUnicodeContainer),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_MLUnicodeContainer),
            "::",
            stringify!(type_)
        )
    );
}
pub type WSUnicodeContainer = _MLUnicodeContainer;
extern "C" {
    pub fn WSNewUnicodeContainer(
        string: *const ::std::os::raw::c_void,
        length: ::std::os::raw::c_int,
        type_: WSUnicodeContainerType,
    ) -> *mut WSUnicodeContainer;
}
extern "C" {
    pub fn WSReleaseUnicodeContainer(string: *mut WSUnicodeContainer);
}
extern "C" {
    pub fn WSCreateMark(mlp: WSLINK) -> MLINKMark;
}
extern "C" {
    pub fn WSSeekToMark(
        mlp: WSLINK,
        mark: MLINKMark,
        index: ::std::os::raw::c_int,
    ) -> MLINKMark;
}
extern "C" {
    pub fn WSSeekMark(
        mlp: WSLINK,
        mark: MLINKMark,
        index: ::std::os::raw::c_int,
    ) -> MLINKMark;
}
extern "C" {
    pub fn WSDestroyMark(mlp: WSLINK, mark: MLINKMark);
}
extern "C" {
    pub fn WSTransferExpression(dmlp: WSLINK, smlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSTransferToEndOfLoopbackLink(
        dmlp: WSLINK,
        smlp: WSLINK,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSForwardReset(
        mlp: WSLINK,
        marker: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSAlign(lmlp: WSLINK, rmlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSNextPacket(mlp: WSLINK) -> ::std::os::raw::c_int;
}
pub type mldlg_result = ::std::os::raw::c_long;
pub type WSAlertProcPtr = ::std::option::Option<
    unsafe extern "C" fn(
        env: WSEnvironment,
        message: *const ::std::os::raw::c_char,
    ) -> mldlg_result,
>;
pub type WSRequestProcPtr = ::std::option::Option<
    unsafe extern "C" fn(
        env: WSEnvironment,
        prompt: *const ::std::os::raw::c_char,
        response: *mut ::std::os::raw::c_char,
        sizeof_response: ::std::os::raw::c_long,
    ) -> mldlg_result,
>;
pub type WSConfirmProcPtr = ::std::option::Option<
    unsafe extern "C" fn(
        env: WSEnvironment,
        question: *const ::std::os::raw::c_char,
        default_answer: mldlg_result,
    ) -> mldlg_result,
>;
pub type WSRequestArgvProcPtr = ::std::option::Option<
    unsafe extern "C" fn(
        env: WSEnvironment,
        argv: *mut *mut ::std::os::raw::c_char,
        cardof_argv: ::std::os::raw::c_long,
        buf: *mut ::std::os::raw::c_char,
        sizeof_buf: ::std::os::raw::c_long,
    ) -> mldlg_result,
>;
pub type WSRequestToInteractProcPtr = ::std::option::Option<
    unsafe extern "C" fn(
        env: WSEnvironment,
        wait_for_permission: mldlg_result,
    ) -> mldlg_result,
>;
pub type WSDialogProcPtr =
    ::std::option::Option<unsafe extern "C" fn(env: WSEnvironment) -> mldlg_result>;
pub type MLDialogUPP = WSDialogProcPtr;
pub type MLAlertUPP = WSAlertProcPtr;
pub type MLRequestUPP = WSRequestProcPtr;
pub type MLConfirmUPP = WSConfirmProcPtr;
pub type MLRequestArgvUPP = WSRequestArgvProcPtr;
pub type MLRequestToInteractUPP = WSRequestToInteractProcPtr;
pub type MLAlertFunctionType = MLAlertUPP;
pub type MLRequestFunctionType = MLRequestUPP;
pub type MLConfirmFunctionType = MLConfirmUPP;
pub type MLRequestArgvFunctionType = MLRequestArgvUPP;
pub type MLRequestToInteractFunctionType = MLRequestToInteractUPP;
pub type WSDialogFunctionType = MLDialogUPP;
pub const WSAlertFunction: _bindgen_ty_3 = 1;
pub const WSRequestFunction: _bindgen_ty_3 = 2;
pub const WSConfirmFunction: _bindgen_ty_3 = 3;
pub const WSRequestArgvFunction: _bindgen_ty_3 = 4;
pub const WSRequestToInteractFunction: _bindgen_ty_3 = 5;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn MLAlert_unix(
        env: WSEnvironment,
        message: *const ::std::os::raw::c_char,
    ) -> mldlg_result;
}
extern "C" {
    pub fn MLRequest_unix(
        env: WSEnvironment,
        prompt: *const ::std::os::raw::c_char,
        response: *mut ::std::os::raw::c_char,
        sizeof_response: ::std::os::raw::c_long,
    ) -> mldlg_result;
}
extern "C" {
    pub fn MLConfirm_unix(
        env: WSEnvironment,
        question: *const ::std::os::raw::c_char,
        default_answer: mldlg_result,
    ) -> mldlg_result;
}
extern "C" {
    pub fn MLPermit_unix(
        env: WSEnvironment,
        wait_for_permission: mldlg_result,
    ) -> mldlg_result;
}
extern "C" {
    pub fn default_request_argv(
        ep: WSEnvironment,
        argv: *mut *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_long,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_long,
    ) -> mldlg_result;
}
extern "C" {
    pub fn WSAlert(
        env: WSEnvironment,
        message: *const ::std::os::raw::c_char,
    ) -> mldlg_result;
}
extern "C" {
    pub fn WSRequest(
        env: WSEnvironment,
        prompt: *const ::std::os::raw::c_char,
        response: *mut ::std::os::raw::c_char,
        sizeof_response: ::std::os::raw::c_long,
    ) -> mldlg_result;
}
extern "C" {
    pub fn WSConfirm(
        env: WSEnvironment,
        question: *const ::std::os::raw::c_char,
        default_answer: mldlg_result,
    ) -> mldlg_result;
}
extern "C" {
    pub fn WSRequestArgv(
        env: WSEnvironment,
        argv: *mut *mut ::std::os::raw::c_char,
        cardof_argv: ::std::os::raw::c_long,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_long,
    ) -> mldlg_result;
}
extern "C" {
    pub fn WSRequestToInteract(
        env: WSEnvironment,
        wait_for_permission: mldlg_result,
    ) -> mldlg_result;
}
extern "C" {
    pub fn WSSetDialogFunction(
        env: WSEnvironment,
        funcnum: ::std::os::raw::c_long,
        func: WSDialogFunctionType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSAlertCast(f: WSAlertProcPtr) -> WSDialogProcPtr;
}
extern "C" {
    pub fn WSRequestCast(f: WSRequestProcPtr) -> WSDialogProcPtr;
}
extern "C" {
    pub fn WSConfirmCast(f: WSConfirmProcPtr) -> WSDialogProcPtr;
}
extern "C" {
    pub fn WSRequestArgvCast(f: WSRequestArgvProcPtr) -> WSDialogProcPtr;
}
extern "C" {
    pub fn WSRequestToInteractCast(f: WSRequestToInteractProcPtr) -> WSDialogProcPtr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mltimeval {
    pub tv_sec: ::std::os::raw::c_ulong,
    pub tv_usec: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout__mltimeval() {
    const UNINIT: ::std::mem::MaybeUninit<_mltimeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_mltimeval>(),
        16usize,
        concat!("Size of: ", stringify!(_mltimeval))
    );
    assert_eq!(
        ::std::mem::align_of::<_mltimeval>(),
        8usize,
        concat!("Alignment of ", stringify!(_mltimeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mltimeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_mltimeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type wstimeval = _mltimeval;
extern "C" {
    pub fn WSReady(mlp: WSLINK) -> ::std::os::raw::c_int;
}
pub type WSREADYPARALLELENV = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn WSReadyParallel(
        arg1: WSENV,
        arg2: *mut WSLINK,
        arg3: ::std::os::raw::c_int,
        arg4: wstimeval,
    ) -> ::std::os::raw::c_int;
}
pub type WSLinkWaitCallBackObject = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: WSLINK,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn WSWaitForLinkActivity(mlp: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSWaitForLinkActivityWithCallback(
        mlp: WSLINK,
        callback: WSLinkWaitCallBackObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Template interface"]
    pub static mut stdlink: WSLINK;
}
extern "C" {
    pub static mut stdenv: WSEnvironment;
}
extern "C" {
    pub static mut stdyielder: WSYieldFunctionObject;
}
extern "C" {
    pub static mut stdhandler: WSMessageHandlerObject;
}
extern "C" {
    pub fn WSMain(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSMainString(
        commandline: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSMainArgv(
        argv: *mut *mut ::std::os::raw::c_char,
        argv_end: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSInstall(arg1: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSAnswer(arg1: WSLINK) -> wsapi_packet;
}
extern "C" {
    pub fn WSDoCallPacket(arg1: WSLINK) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSEvaluate(
        arg1: WSLINK,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSEvaluateString(
        arg1: WSLINK,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WSDefaultHandler(
        arg1: WSLINK,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn WSDefaultYielder(
        arg1: WSLINK,
        arg2: WSYieldParameters,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut WSAbort: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut WSDone: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut WSSpecialCharacter: ::std::os::raw::c_long;
}
